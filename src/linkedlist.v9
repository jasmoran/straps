func ll_new()(addr) {
	# Allocate memory
	var addr = allocate(24)

	# Set first, last and length
	var addr[0] = 0
	var addr[8] = 0
	var addr[16] = 0

	return var addr
}

func lln_new(payload)(addr) {
	# Allocate memory
	var addr = allocate(24)

	# Set next, prev and payload
	var addr[0] = 0
	var addr[8] = 0
	var addr[16] = var payload

	return var addr
}

func ll_first(ll)() {
	return var ll[0]
}

func ll_last(ll)() {
	return var ll[8]
}

func ll_length(ll)() {
	return var ll[16]
}

func lln_next(lln)() {
	return var lln[0]
}

func lln_prev(lln)() {
	return var lln[8]
}

func lln_payload(lln)() {
	return var lln[16]
}

func ll_insert_before(payload, lln, ll)(new) {
	var new = lln_new(var payload)

	if (var lln != 0) {
		# Set up new
		var new[0] = var lln				# new.next = lln
		var new[8] = var lln[8]			# new.prev = lln.prev

		if (var lln[8] != 0) {
			# Update lln.prev
			var lln[8][0] = var new		# lln.prev.next = new
		}

		# Update lln
		var lln[8] = var new				# lln.prev = new
	}

	# Update ll
	rax = var lln
	if (var ll[0] == rax) {
		var ll[0] = var new					# Set first
	}
	if (var ll[8] == 0) {
		var ll[8] = var new					# Set last
	}
	var ll[16]++

	return var new
}

func ll_prepend(payload, ll)() {
	ll_insert_before(var ll, var ll[0], var payload)
	return rax
}

func ll_append(payload, ll)(new) {
	var new = lln_new(var payload)

	var new[8] = var ll[8]			# Set prev
	if (var ll[8] != 0) {
		var ll[8][0] = var new		# Set last.next
	}
	var ll[8] = var new					# Set last

	# Set first if empty
	if (var ll[0] == 0) {
		var ll[0] = var new
	}

	var ll[16]++

	return var new
}

func ll_remove(ix, ll)(node) {
	var node = ll_fetch_node(var ll, var ix)
	ll_remove_node(var ll, var node)
	return
}

func ll_remove_node(node, ll)(node) {
	if (var node[0] == 0) {
		# last = prev
		var ll[8] = var node[8]
	} else {
		# next.prev = prev
		var node[0][8] = var node[8]
	}

	if (var node[8] == 0) {
		# first = next
		var ll[0] = var node[0]
	} else {
		# prev.next = next
		var node[8][0] = var node[0]
	}

	var ll[16]--

	return
}

func ll_fetch_node(ix, ll)(node) {
	var node = var ll[0]
	loop {
		if (var node == 0) {
			var node = var ll[0]
		}

		if (var ix == 0) {
			return var node
		}

		var node = var node[0]
		var ix--
	}
}

func ll_fetch_by_data(data, ll)(node) {
	var node = var ll[0]
	loop {
		if (var node == 0) {
			rax = 0
			rax--
			return
		}

		rax = var data
		if (var node[16] == rax) {
			return var node
		}

		var node = var node[0]
	}
}

func ll_get(ix, ll)() {
	return ll_fetch_node(var ll, var ix)[16]
}

func ll_set(val, ix, ll)() {
	ll_fetch_node(var ll, var ix)[16] = var val
	return
}

func ll_empty(ll)() {
	var ll[0] = 0
	var ll[8] = 0
	var ll[16] = 0
	return
}
