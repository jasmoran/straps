define k "String"
define v "FunctionNode"
include "src/stdlib/Map.generic"

define t "FunctionNode"
include "src/stdlib/Array.generic"

define t "FunctionNode"
include "src/stdlib/LinkedList.generic"

define t "FunctionNode"
include "src/stdlib/Option.generic"
define t "Map<String_FunctionNode>"
include "src/stdlib/Option.generic"

define t "FunctionNode"
include "src/stdlib/Set.generic"

func FunctionNode FunctionNode_new(PositionRange pos, Type ret_type, String name, LinkedList<StringNode> args, BlockNode block) {
	return FunctionNode_new(nFUNCTION, pos, ret_type, name, args, block, 0)
}

class virtual FunctionNode < RetNode (String name, LinkedList<StringNode> args, BlockNode block, Number num_vars) {
	func Option<Node> accept(Visitor v) {
		return v.visit(this)
	}

	func void accept_children(Visitor v) {
		for (arg in this.args) {
			arg_iter.set(arg.accept(v).to(Option<StringNode>).unwrap_or(arg))
		}
		this.block = this.block.accept(v).unwrap_or(this.block)
	}

	func FunctionNode shallow_clone() {
		return FunctionNode_new(this.position, this.ret_type, this.name, this.args, BlockNode_new(this.block.position, this.block.scope))
	}

	func FunctionNode clone() {
		return FunctionNode_new(this.type, this.position, this.ret_type, this.name, this.args, this.block, this.num_vars)
	}

	func Boolean equal(FunctionNode other) {
		# Exactly the same function
		if (this == other) return true

		# Must have same number of arguments
		if (this.args.length != other.args.length) return false

		# The function names must be the same
		if (this.name.equal(other.name) == false) return false

		# The types of each argument must be the same
		for (ix in Range_new(this.args.length)) {
			var a = this.args.get(ix).unwrap().ret_type
			var b = other.args.get(ix).unwrap().ret_type
			if (a.raw.equal(b.raw) == false) return false
		}

		return true
	}
}