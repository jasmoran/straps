define k "String"
define v "FunctionNode"
include "src/stdlib/Map.generic"

define t "FunctionNode"
include "src/stdlib/Array.generic"

define t "FunctionNode"
include "src/stdlib/LinkedList.generic"

define t "FunctionNode"
include "src/stdlib/Option.generic"
define t "Map<String_FunctionNode>"
include "src/stdlib/Option.generic"

func FunctionNode FunctionNode_new(Position pos, Type ret_type, String name, ListNode args, ListNode vrbls, ListNode block)(Scope sc) {
	sc = scope
	sc = Scope_new(name, sc)
	return FunctionNode_new(nFUNCTION, pos, ret_type, name, args, vrbls, block, sc, NullString)
}

class virtual FunctionNode < RetNode (String name, ListNode args, ListNode vrbls, ListNode block, Scope scope, String pure) {
	func Option<Node> accept(Visitor v)() {
		return v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		this.args = this.args.accept(v).unwrap_or(this.args)
		this.vrbls = this.vrbls.accept(v).unwrap_or(this.vrbls)
		this.block = this.block.accept(v).unwrap_or(this.block)
	}

	func FunctionNode shallow_clone()(FunctionNode fn) {
		fn = FunctionNode_new(this.position, this.ret_type, this.name, this.args, this.vrbls, ListNode_new(nBLOCK, this.block.position))
		fn.scope = this.scope
		return fn
	}

	func FunctionNode clone() {
		return FunctionNode_new(this.type, this.position, this.ret_type, this.name, this.args, this.vrbls, this.block, this.scope, this.pure)
	}
}