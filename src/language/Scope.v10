define t "Scope"
include "src/stdlib/Option.generic"

func Scope Scope_new() {
	return Scope_new("GLOBAL", None<Scope>)
}

func Scope Scope_new(String name, Scope parent) {
	return Scope_new(name, Some(parent), Map<String_Node>_new(2048))
}

func Scope Scope_new(String name, Option<Scope> parent) {
	return Scope_new(name, parent, Map<String_Node>_new(2048))
}

class Scope (String name, Option<Scope> parent, Map<String_Node> scope) {
	func Option<Node> get(String name) {
		return this.scope.get(name)
	}

	func void set(String name, Node node) {
		this.scope.set(name, node)
	}

	func void set(String name, FunctionNode node) {
		var nullpos = Position_new(MetaCharacter_new('?', 0, 0), "Scope Capsule")
		var capsule = this.get(name)
											.unwrap_or(ListNode_new(nLIST, PositionRange_new(nullpos, nullpos)))

		if (capsule.type != nLIST) error("Attempted to redefine identifier ", name, " with a function")
		capsule.to(ListNode).append(node)

		this.scope.set(name, capsule)
	}

	func Option<FunctionNode> resolve(StringNode name, LinkedList<RetNode> args) {
		var lnoptions = this.search(name.string)
		if (lnoptions.is_none() == true) return None<FunctionNode>
		if (lnoptions.unwrap().type != nLIST) return None<FunctionNode>

		var options = lnoptions.unwrap().to(ListNode).children

		# Track the best option, best is the distance => smaller is better
		var Option<FunctionNode> best_match = None<FunctionNode>
		var best = 9999

		# Loop through each possible match
		for (opt in options) {
			if (opt.type != nFUNCTION && opt.type != nVTAB_ACCESS)
				error("Found ", opt.type.toString(), " in function scope")
			var option = opt.to(FunctionNode)
			var optargs = option.args
			if (optargs.length != args.length) next

			# Nothing to compare if there are no arguments
			if (args.length == 0) {
				best_match = Some(option)
				break
			}

			var rank = 0

			# Loop through each of the options args
			for (index in Range_new(args.length)) {
				var opt_type = optargs.get(index).to(RetNode).ret_type
				var arg_type = args.get(index).unwrap().ret_type
				opt_type.resolve(scope)
				# Returns the distance from the arg type to the optarg type
				var match = opt_type.child_rank(arg_type)

				if (match > 0) {
					rank += match
				} else {
					# No match
					rank = 0
					break
				}
			}

			# Check how this option compares
			if (rank > 0 && rank < best) {
				best = rank
				best_match = Some(option)
			}
		}

		# Check we found a match
		if (best_match.is_some() == true) return Some(best_match.unwrap().clone())

		return None<FunctionNode>
	}

	func Option<Node> resolve(StringNode name) {
		var res = this.search(name.string)

		# Can't clone here because Inferring process needs to modify the
		# existing identifier in the scope not a clone.
		if (res.is_some() == true) {
			if(res.unwrap().type != nLIST) return res
		}

		# Just use unresolved identifier
		return None<Node>
	}

	func Option<Node> search(String name) {
		var sc = Some(this)
		loop {
			if (sc.is_none() == true) break
			var res = sc.unwrap().get(name)
			if (res.is_some() == true) return res
			sc = sc.unwrap().parent
		}

		return None<Node>
	}

	func void print() {
		var index = 0
		var printer = Printer_new(1, STDOUT, 1)
		loop {
			if (this.scope.keys.length == index) break
			this.scope.keys.get(index).print()
			": <<".println()
			this.scope.values.get(index).accept(printer)
			">>".println()
			index++
		}
	}
}
