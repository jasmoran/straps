func Scope Scope_new()(Scope sc) {
	sc = 0
	return Scope_new("GLOBAL", sc)
}

func Scope Scope_new(String name, Scope parent)(Map<String_Node> sc) {
	sc = Map<String_Node>_new(2048)
	return Scope_new(name, parent, sc)
}

class Scope (String name, Scope parent, Map<String_Node> scope) {
	func Node get(String name)() {
		return this.scope.get(name)
	}

	func void set(String name, Node node) {
		this.scope.set(name, node)
	}

	func Node resolve(String name)(Scope s, Node res) {
		s = this
		if (s == 0) error("Attempted to resolve on NULL scope")
		loop {
			if (s == 0) break
			res = s.get(name)
			if (res > 0) return res
			s = s.parent
		}

		# Add special GLOBAL scope check
		s = scope
		res = s.get(name)
		if (res > 0) return res
		error("Could not resolve value ", name)
	}

	func void print()(Number index, Visitor printer) {
		index = 0
		printer = Printer_new(1, STDOUT, 1)
		loop {
			if (this.scope.keys.length == index) break
			this.scope.keys.get(index).print()
			": <<".println()
			this.scope.values.get(index).accept(printer)
			">>".println()
			index++
		}
	}
}
