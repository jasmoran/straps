func Functions Functions_new(ListNode lfuncs) {
	var Visitor v = 0
	var fun = Functions_new(v, lfuncs, true)
	fun.v = fun
	return fun
}

class virtual Functions < Visitor (Visitor v, ListNode lfuncs, Boolean root) {
	func void visit(FunctionNode n)(String name) {
		name = n.name
		if (n.name.equal("main") == true) name = "_start"
		var pos = n.position.clone("Functions")
		this.lfuncs.append(StringNode_new(nIDENTIFIER, pos, Type_new(), name).toNode())
		this.lfuncs.append(StringNode_new(nSTRING, pos, Type_new(), n.name).toNode())

		return 0
	}

	func void visit(ListNode n)() {
		if (n.type == nBLOCK) {
			if (this.root == true) {
				n.append(this.lfuncs.toNode())
				this.root = false
			}
		}

		n.accept_children(this.v)
  	return 0
	}
}
