func Printer Printer_new(Number indent, Stream s, Number depth)() {
	return Printer_new(indent, s, depth, true)
}

func Printer Printer_new(Stream s)() {
	return Printer_new(0, s, 9999)
}

func Printer Printer_new()() {
	return Printer_new(0, STDOUT, 9999)
}

class virtual Printer < Visitor (Number indent, Stream s, Number depth, Boolean print_scope) {
	func void pi()(Number i) {
		i = this.indent loop { if (i <= 0) { break } "  ".print(this.s) i-- }
	}

	func Option<Node> visit(Node n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().println(this.s)

  	return None<Node>
	}

	func Option<Node> visit(CallNode n) {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		"nCALL(".print(this.s)
		n.ret_type.print(this.s)
		")\n".print(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

		return None<Node>
	}

	func Option<Node> visit(BinaryOperationNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.ret_type.print(this.s)
		": ".print(this.s)
		n.op.toString().print(this.s)
		")\n".print(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(UnaryOperationNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.ret_type.print(this.s)
		": ".print(this.s)
		n.op.toString().print(this.s)
		", ".print(this.s)
		if (n.left == true) {
			"left".print(this.s)
		} else {
			"right".print(this.s)
		}
		")\n".print(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(StringNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.ret_type.print(this.s)
		": \"".print(this.s)
		n.string.print(this.s)
		"\")".println(this.s)

  	return None<Node>
	}

	func Option<Node> visit(ClassNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.name.print(this.s)
		")\n".print(this.s)
		if (this.print_scope == true) n.scope.print()

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(FunctionNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.ret_type.print(this.s)
		": ".print(this.s)
		n.name.print(this.s)
		")\n".print(this.s)
		if (this.print_scope == true) n.scope.print()

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<ListNode> visit(ListNode n)() {
		if (this.indent > this.depth) return None<ListNode>
		this.pi()
		n.type.toString().println(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<ListNode>
	}

	func Option<Node> visit(IfNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().println(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(LoopNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().println(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(ReturnNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().println(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

  	return None<Node>
	}

	func Option<Node> visit(EnumNode n)() {
		if (this.indent > this.depth) return None<Node>
		this.pi()
		n.type.toString().print(this.s)
		"(".print(this.s)
		n.name.print(this.s)
		")\n".print(this.s)

		this.indent++
		n.accept_children(this)
		this.indent--

		return None<Node>
	}
}
