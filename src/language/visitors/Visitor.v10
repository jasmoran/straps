define T "Visitor v, void m_visit_Node, void m_visit_BinaryOperationNode, void m_visit_UnaryOperationNode, void m_visit_StringNode, void m_visit_ClassNode, void m_visit_FunctionNode, void m_visit_ListNode, void m_visit_IfNode, void m_visit_LoopNode, void m_visit_ReturnNode, void m_visit_EnumNode"
define U "v, m_visit_Node, m_visit_BinaryOperationNode, m_visit_UnaryOperationNode, m_visit_StringNode, m_visit_ClassNode, m_visit_FunctionNode, m_visit_ListNode, m_visit_IfNode, m_visit_LoopNode, m_visit_ReturnNode, m_visit_EnumNode"

func Visitor Visitor_new()(?T) {
	define V Visitor
	include "src/language/visitors/init.v10"
	return Visitor_new(?U)
}

class Visitor(?T) {
	func void visit(Node n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(BinaryOperationNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(UnaryOperationNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(StringNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(ClassNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(FunctionNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(ListNode n)() {
		n.type = nGLOBAL
		error("Cannot visit abstract Visitor")
	}

	func void visit(IfNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(LoopNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(ReturnNode n)() {
		error("Cannot visit abstract Visitor")
	}

	func void visit(EnumNode n)() {
		error("Cannot visit abstract Visitor")
	}
}
