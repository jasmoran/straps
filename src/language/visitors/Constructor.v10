func Constructor Constructor_new() {
	return Constructor_new(None<BlockNode>)
}

class virtual Constructor < Visitor (Option<BlockNode> pb) {
	func Option<Node> visit(ClassNode n)(Number size) {
		var pb = this.pb.expect("Class defined outside of block")

		var pos = n.position.clone("Constructor")
		var new_obj = StringNode_new(nIDENTIFIER, pos, Type_new(n.name), "obj")

		size = n.fields.children.length
		if (n.vtable.is_some() == true) size++
		size << 3

		# Create allocate call + assign and append to block
		var rando = LinkedList<RetNode>_new()
		rando.append(
			StringNode_new(nNUMBER, pos, Type_new("Number"), size.toString())
		)

		var block = BlockNode_new(pos, Scope_new("ConstructorScope", pb.scope)).append(
			BinaryOperationNode_new(
				pos,
				ASSIGN,
				new_obj,
				CallNode_new(
					pos,
					StringNode_new(nIDENTIFIER, pos, Type_new(n.name, CAST), "allocate"),
					rando
				)
			)
		)

		# Loop through fields
		for (field in n.fields.children) {
			# Assign passed values to this field and append to block
			block.append(
				BinaryOperationNode_new(
					pos,
					ASSIGN,
					BinaryOperationNode_new(pos, DOT, new_obj, field),
					field
				)
			)
		}

		var ListNode args = ListNode_new(nLIST, pos, n.fields.children.shallow_clone())

		# Add vtable
		if (n.vtable.is_some() == true) {
			# Add vtable to fields
			var Node vt_ident = StringNode_new(nIDENTIFIER, pos, Type_new("void"), "vt")
			n.fields.prepend(vt_ident)

			var tabname = "_vtable_".clone(n.name.length).append(n.name)

			# Assign vtable
			block.append(
				BinaryOperationNode_new(
					pos,
					ASSIGN,
					BinaryOperationNode_new(Type_new("void", CAST), pos, DOT, new_obj, vt_ident),
					StringNode_new(nNASM, pos, Type_new("void", CAST), tabname)
				)
			)
		}

		# Create return node and append to block
		block.append(
			ReturnNode_new(pos, new_obj)
		)

		# Create _new function and append to parent block
		pb.append(
			FunctionNode_new(
				nFUNCTION,
				pos,
				Type_new(n.name),
				n.name.clone(4).append("_new"),
				args,
				ListNode_new(nLIST, pos).append(new_obj),
				block,
				NullString,
				1
			)
		)

		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var old_pb = this.pb
		this.pb = Some(n)

		n.accept_children(this)

		this.pb = old_pb

		return None<BlockNode>
	}
}
