class virtual Casting < Visitor () {
	func Option<Node> visit(CallNode n) {
		n.accept_children(this)

		# Only deal with binary operation nodes
		if (n.cfunction.type != nBINARYOP) return None<Node>
		var binop = n.cfunction.to(BinaryOperationNode)

		# Only deal with method-like calls
		if (binop.op != DOT) return None<Node>

		# Only interested in "cast" or "to" methods
		var name = binop.rhs.to(StringNode).string
		if (name.equal("cast") == false && name.equal("to") == false) return None<Node>

		# Check for the right number of args
		if (n.args.length != 1) error("Cast must be passed a single type")

		# Set ret_type of lhs
		var replacement = binop.lhs.to(RetNode)
		replacement.ret_type = Type_new(n.args.get(0).to(StringNode).string, CAST)

		return Some(replacement)
	}
}
