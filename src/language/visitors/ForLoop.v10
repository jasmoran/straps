class virtual ForLoop < Visitor () {

	func Node call_method(Position pos, Node obj, String method) {
		# Create method call
		return CallNode_new(
			pos,
			BinaryOperationNode_new(Type_new(), pos, DOT,
				obj,
				StringNode_new(nIDENTIFIER, pos, Type_new(), method)
			)
		)
	}

	func Node assign_method(Position pos, StringNode vrbl, Node obj, String method) {
		# Create method call
		var Node methcall = this.call_method(pos, obj, method)

		# Assign result of methcall to vrbl
		var infer = Type_new(INFER)
		vrbl.ret_type = infer
		var Node assn = BinaryOperationNode_new(Type_new(), pos, ASSIGN, vrbl, methcall)

		# Infer type of vrbl
		return UnaryOperationNode_new(pos, infer, VAR, assn, true)
	}


	# for (xxx in yyy) {
	# 	## ...n.block
	# }

	# { ## outer_block
	# 	var xxx_iter = yyy.iter()
	# 	loop {
	# 		if (xxx_iter.finished() == true) break
	# 		var xxx = xxx_iter.fetch()
	# 		## ...n.block
	# 	}
	# } ## outer_block


	func Option<Node> visit(ForNode n) {
		# TODO: Better than this
		var pos = n.position.clone("ForNode")

		n.block.accept(this)

		var outer_block = BlockNode_new(pos, n.block.scope)

		# Create iterator variable name
		var iterstr = n.item.string.clone(5).append("_iter")
		var iterator = StringNode_new(nIDENTIFIER, pos, Type_new(), iterstr)

		# var $iterator$ = $n.iterable$.iter()
		outer_block.append(this.assign_method(pos, iterator, n.iterable, "iter"))

		# Add item access to loop block
		# var $n.item$ = $iterator$.fetch()
		n.block.prepend(this.assign_method(pos, n.item, iterator, "fetch"))

		# Create conditional
		var Node cond = BinaryOperationNode_new(Type_new(), pos, EQUAL,
			this.call_method(pos, iterator, "finished"),
			StringNode_new(nIDENTIFIER, pos, Type_new(), "true")
		)

		# Create break block => { break }
		var brblock = BlockNode_new(pos, n.block.scope).append(Node_new(nBREAK, pos))

		# Add end check to loop block
		n.block.prepend(IfNode_new(pos, cond, brblock))

		# Create loop => loop { $n.block$ }
		outer_block.append(LoopNode_new(pos, n.block))

  	return Some(outer_block.to(Node))
	}
}
