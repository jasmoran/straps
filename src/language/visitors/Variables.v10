func Variables Variables_new()(?T, FunctionNode fn) {
	define V "Variables"
	include "src/language/visitors/init.v10"
	fn = 0
	v = Variables_new(?U, fn)
	v.v = v
	return v
}

class Variables(?T, FunctionNode containing_fun) {
	func void visit(FunctionNode n)(FunctionNode old_cf) {
		old_cf = this.containing_fun
		this.containing_fun = n
		n.visit_children(this.v)
		this.containing_fun = old_cf
		return 0
	}

	func void visit(UnaryOperationNode n)(BinaryOperationNode binop) {
		if (n.op != VAR) return 0
		binop = n.expr
		this.containing_fun.vrbls.append(binop.lhs)
		return binop
	}




	func void visit(Node n)() {
  	return 0
	}

	func void visit(BinaryOperationNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(StringNode n)() {
  	return 0
	}

	func void visit(ClassNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ListNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(EnumNode n)() {
		n.visit_children(this.v)
		return 0
	}
}
