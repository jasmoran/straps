func Variables Variables_new(Reporting reporting) {
	return Variables_new(None<BlockNode>, 0, 0, reporting)
}

class virtual Variables < Visitor (
	Option<BlockNode> containing_block,
	Number max_vars,
	Number available_position,
	Reporting reporting
) {

	func Option<Node> visit(FunctionNode n) {
		this.available_position = 0
		this.max_vars = this.available_position

		n.accept_children(this)

		n.num_vars = this.max_vars

		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var old_cb = this.containing_block
		var old_ap = this.available_position

		this.containing_block = Some(n)
		n.accept_children(this)

		this.containing_block = old_cb
		this.available_position = old_ap

		return None<BlockNode>
	}

	func Option<Node> visit(UnaryOperationNode n) {
		if (n.op != VAR) return None<Node>
		var containing_block = this.containing_block.expect("var declared outside of any block")

		var assignment = n.expr.to(BinaryOperationNode)
		var vrbl = assignment.lhs.to(StringNode)

		if (containing_block.scope.search(vrbl.string).is_some() == true) {
			this.reporting.printRedefinedVar(vrbl)
			return Some(assignment.to(Node))
		}

		# Add variable to block scope
		var localvar = LocalVariableNode_new(
				vrbl.ret_type,
				vrbl.position,
				this.available_position,
				vrbl.string
			)
		containing_block.scope.set(vrbl.string, localvar)
		containing_block.vrbls.append(localvar)

		# Update max_vars if required
		this.available_position++
		if (this.available_position > this.max_vars) this.max_vars = this.available_position

		return Some(assignment.to(Node))
	}
}
