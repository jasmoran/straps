func Definition Definition_new()(?T) {
	define V Definition
	include "src/language/visitors/init.v10"
	v = Definition_new(?U)
	v.v = v
	return v
}

# Gets all local & global variables, arguments, fields and enum values
# and adds them to their respective scopes.
# These "variables" are stored as { name => offset/label }
#class Definition(?T, Number ix, NodeType curr_type, Map_Node scope) {
class Definition(?T) {
	func void visit(ClassNode n)(Number ix, StringNode field, LinkedListNode lln) {
		#this.ix = 0
		#this.curr_type = n.type
		#this.scope = n.scope
		#n.fields.visit_children(this.v)
		#this.curr_type = 0

		lln = n.fields.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store field offset in class scope
			n.scope.set(
				field.string,
				StringNode_new(nNUMBER, field.ret_type, ix.toString()).toNode()
			)

			ix += 8

			lln = lln.fwrd
		}

		# TODO: Delete class node from parent block
	}

	func void visit(EnumNode n)(Number ix, StringNode field, LinkedListNode lln) {
		ix = 0

		lln = n.values.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store value in global scope
			scope.set(
				field.string,
				StringNode_new(nNUMBER, n.name, ix.toString()).toNode()
			)

			ix++

			lln = lln.fwrd
		}
	}

	func void visit(StringNode n)() {
		if (this.curr_type == nCLASS) {
			# Store field offset in class scope
			this.scope.set(
				field.string,
				StringNode_new(nNUMBER, n.ret_type, ix.toString()).toNode()
			)
			ix += 8
		} else if (this.curr_type == nENUM) {
			# Store value in global scope
			this.scope.set(
				field.string,
				StringNode_new(nNUMBER, n.name, ix.toString()).toNode()
			)
			ix++
		}
	}





	func void visit(Node n)() {
	}

	func void visit(BinaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(UnaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(FunctionNode n)() {
		n.visit_children(this.v)
	}

	func void visit(ListNode n)() {
		n.visit_children(this.v)
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
	}

}
