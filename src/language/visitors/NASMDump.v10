func Dump Dump_new(Stream stream, LinkedList<String> externals) {
	var binops = Array<String>_new(5)
	binops.append("add ")
	binops.append("sub ")
	binops.append("shl ")
	binops.append("shr ")
	binops.append("mov ")

	var scallreg = Array<String>_new(7)
	scallreg.append("rax")
	scallreg.append("rdi")
	scallreg.append("rsi")
	scallreg.append("rdx")
	scallreg.append("r10")
	scallreg.append("r8")
	scallreg.append("r9")

	"section .text".println(stream)
	for (extern in externals) {
		"extern ".print(stream)
		extern.println(stream)
	}

	return Dump_new(binops, scallreg, true, 0, "ERRORlabel", "ERRORlabel", "ERRORlabel", true, stream, " ")
}

class virtual Dump < Visitor (Array<String> binops, Array<String> scallreg, Boolean top, Number counter,
					 String trueLabel, String falseLabel, String target, Boolean negate,
					 Stream stream, String idloop) {

	func Option<Node> visit(Node n) {
		if (n.type == nNEXT) {
			"jmp .loop_".print(this.stream)
			this.idloop.println(this.stream)
		} else if (n.type == nBREAK) {
			"jmp .loop_end_".print(this.stream)
			this.idloop.println(this.stream)
		}

		return None<Node>
	}

	func Option<Node> visit(CallNode n) {
		"call ".print(this.stream)
		if (n.cfunction.type == nFUNCTION) {
			n.cfunction.to(FunctionNode).name.print(this.stream)
		} else {
			n.cfunction.accept(this)
		}
		"\n".print(this.stream)

		return None<Node>
	}

	func Option<Node> visit(BinaryOperationNode n) {
		if (n.op == DOT || n.op == SQUARE_OPEN) {
			if (n.rhs.type != nNUMBER && n.rhs.type != nINDEX)
				error("Non-number ", n.rhs.type.toString(), "in DOT or SQUARE_OPEN")
			var num = n.rhs.to(StringNode).string

			"QWORD[".print(this.stream)
			n.lhs.accept(this)
			if (num.get(0) != '-') "+".print(this.stream)
			num.print(this.stream)
			"]".print(this.stream)

		} else if (n.op == OR) {
			var lastFalse = this.falseLabel
			this.falseLabel = this.createLabel(".falseCond")

			this.target = this.trueLabel
			this.negate = false
			n.lhs.accept(this)

			this.falseLabel.print(this.stream)
			":".println(this.stream)
			this.falseLabel = lastFalse

			this.target = this.trueLabel
			this.negate = false
			n.rhs.accept(this)

			"jmp ".print(this.stream)
			this.falseLabel.println(this.stream)

		} else if (n.op == AND) {
			var lastTrue = this.trueLabel
			this.trueLabel = this.createLabel(".trueCond")

			this.target = this.falseLabel
			this.negate = true
			n.lhs.accept(this)

			this.trueLabel.print(this.stream)
			":".println(this.stream)
			this.trueLabel = lastTrue

			this.target = this.falseLabel
			this.negate = true
			n.rhs.accept(this)
			"jmp ".print(this.stream)

			this.trueLabel.println(this.stream)
		} else {
			# Standard binops
			if (n.op >= ADD)
			if (n.op <= ASSIGN) {
				# Retrieve string representation of op
				var ix = (n.op - ADD).to(Number)
				var op = this.binops.get(ix)

				op.print(this.stream)
				n.lhs.accept(this)
				", ".print(this.stream)
				n.rhs.accept(this)
				"\n".print(this.stream)
				return None<Node>
			}

			# Comparisons
			if (n.op >= EQUAL)
			if (n.op <= LESS_EQ) {
				"cmp ".print(this.stream)
				n.lhs.accept(this)
				", ".print(this.stream)
				n.rhs.accept(this)
				"\n".print(this.stream)

				if (this.negate == true) {
					if (n.op == EQUAL)      "jne ".print(this.stream)
					if (n.op == NOT_EQUAL)  "je  ".print(this.stream)
					if (n.op == GREATER)    "jle ".print(this.stream)
					if (n.op == GREATER_EQ) "jl  ".print(this.stream)
					if (n.op == LESS)       "jge ".print(this.stream)
					if (n.op == LESS_EQ)    "jg  ".print(this.stream)
				} else {
					if (n.op == EQUAL)      "je  ".print(this.stream)
					if (n.op == NOT_EQUAL)  "jne ".print(this.stream)
					if (n.op == GREATER)    "jg  ".print(this.stream)
					if (n.op == GREATER_EQ) "jge ".print(this.stream)
					if (n.op == LESS)       "jl  ".print(this.stream)
					if (n.op == LESS_EQ)    "jle ".print(this.stream)
				}

				this.target.println(this.stream)
				return None<Node>
			}

			# Check op token is valid
			error("Can't use ", n.op.toString(), " as a binary operator")
		}

		return None<Node>
	}

	func Option<Node> visit(UnaryOperationNode n) {
		if (n.op == INCREMENT) "inc ".print(this.stream)
		else if (n.op == DECREMENT) "dec ".print(this.stream)
		else if (n.op == PUSH) "push ".print(this.stream)
		else if (n.op == ASTERISK) "mul ".print(this.stream)
		else if (n.op == FWD_SLASH) "div ".print(this.stream)
		else if (n.op == MINUS) "neg ".print(this.stream)
		else error("Can't use ", n.op.toString(), " as a unary operator")

		n.accept_children(this)
		"\n".print(this.stream)
		return None<Node>
	}

	func Option<Node> visit(StringNode n) {
		if (n.type == nCHARACTER) {
			"\`".print(this.stream)
			n.string.print(this.stream)
			"\`".print(this.stream)
		} else if (n.type == nNASM) {
			n.string.println(this.stream)
		} else {
			n.string.print(this.stream)
		}
		return None<Node>
	}

	func Option<Node> visit(ClassNode n) {
		n.name.print(this.stream)
		"Static".print(this.stream)

		return None<Node>
	}

	func Option<Node> visit(StaticClassNode n) {
		"section .bss".println(this.stream)
		n.klass.name.print(this.stream)
		"Static:\nresq ".print(this.stream)
		n.klass.fields.length.toString().println(this.stream)
		"section .text".println(this.stream)

		if (n.klass.vtable.is_none() == true) return None<Node>
		"section .data\n_vtable_".print(this.stream)
		n.klass.name.print(this.stream)
		":\ndq ".print(this.stream)

		var array = n.klass.vtable.unwrap().values
		var ix = 0
		loop {
			if (ix == array.length) { break }
			var FunctionNode funnode = array.get(ix)
			funnode.name.print(this.stream)
			", ".print(this.stream)
			ix++
		}

		"0\nsection .text".println(this.stream)
		return None<Node>
	}

	func Option<Node> visit(FunctionNode n) {
		"global ".print(this.stream)
		if (n.name.equal("main") == true) {
			"_start".println(this.stream)
			"_start".print(this.stream)
		} else {
			n.name.println(this.stream)
			n.name.print(this.stream)
		}
		":\npush rbp\nmov rbp, rsp\nsub rsp, ".print(this.stream)
		var size = n.num_vars
		size << 3
		size.toString().println(this.stream)
		"push r12\npush r13".println(this.stream)

		# Dump block
		n.block.accept(this)

		".ret:".println(this.stream)
		if (n.name.equal("main") == true) {
			"mov rdi, rax\nmov rax, 60\nsyscall".println(this.stream)
		} else {
			"pop r13\npop r12\nmov rsp, rbp\npop rbp\nret ".print(this.stream)
			size = n.args.length
			size << 3
			size.toString().println(this.stream)
		}
		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		if (this.top == true) {
			"section .text\nglobal _start".println(this.stream)
			this.top = false
		}

		n.accept_children(this)

		return None<BlockNode>
	}

	func Option<ListNode> visit(ListNode n) {
		if (n.type == nSYS) {
			var ix = 0
			for (nn in n.children) {
				"mov ".print(this.stream)
				var s = this.scallreg.get(ix)
				s.print(this.stream)
				", ".print(this.stream)
				nn.accept(this)
				"\n".print(this.stream)
				ix++
			}
			"syscall".println(this.stream)
		} else if (n.type == nGLOBAL) {
			"section .bss".println(this.stream)
			for (nn in n.children) {
				"global ".print(this.stream)
				nn.accept(this)
				"\n".print(this.stream)
				nn.accept(this)
				": resq 1".println(this.stream)
			}
			"section .text".println(this.stream)
		} else if (n.type == nSTRINGS) {
			"section .data".println(this.stream)
			var ix = 0
			for (nn in n.children) {
				if (nn.type != nSTRING) error()

				"string_".print(this.stream)
				ix.toString().print(this.stream)
				":\ndq ".print(this.stream)
				var s = nn.to(StringNode).string.unescaped_length().toString()
				s.print(this.stream)
				", ".print(this.stream)
				s.print(this.stream)
				", 24+string_".print(this.stream)
				ix.toString().println(this.stream)
				"db \`".print(this.stream)
				nn.to(StringNode).string.print(this.stream)
				"\`\n".print(this.stream)
				ix++
			}
			"section .text".println(this.stream)
		} else if (n.type == nFUNCTIONS) {
			"section .data\n_FUNCTIONLIST:\ndq ".print(this.stream)
			var ix = n.children.length
			ix >> 1
			var s = ix.toString()
			s.print(this.stream)
			", ".print(this.stream)
			s.print(this.stream)
			", 24+_FUNCTIONLIST".print(this.stream)

			for (nn in n.children) {
				", ".print(this.stream)
				nn.accept(this)
				nn_iter.fetch()
			}

			"\n_FUNCTIONNAMELIST:\ndq ".print(this.stream)
			s.print(this.stream)
			", ".print(this.stream)
			s.print(this.stream)
			", 24+_FUNCTIONNAMELIST".print(this.stream)

			for (nn in n.children) {
				nn = nn_iter.fetch()
				", ".print(this.stream)
				nn.accept(this)
			}

			"\nsection .text".println(this.stream)
		} else {
			n.accept_children(this)
		}

		return None<ListNode>
	}

	func Option<Node> visit(IfNode n) {
		var old_trueLabel = this.trueLabel
		var old_falseLabel = this.falseLabel
		var old_target = this.target
		var old_negate = this.negate

		this.trueLabel = this.createLabel(".trueLabel")
		this.falseLabel = this.createLabel(".falseLabel")
		this.counter++

		this.target = this.falseLabel
		this.negate = true
		n.condition.accept(this)

		this.trueLabel.print(this.stream)
		":".println(this.stream)
		n.block_if.accept(this)

		var endLabel = this.createLabel(".endIf")
		if (n.block_else.is_some() == true) {
			"jmp ".print(this.stream)
			endLabel.println(this.stream)
		}
		this.falseLabel.print(this.stream)
		":".println(this.stream)
		if (n.block_else.is_some() == true) {
			n.block_else.unwrap().accept(this)
			endLabel.print(this.stream)
			":".println(this.stream)
		}

		this.trueLabel = old_trueLabel
		this.falseLabel = old_falseLabel
		this.target = old_target
		this.negate = old_negate

		return None<Node>
	}

	func Option<Node> visit(LoopNode n) {
		var oldid = this.idloop
		this.idloop = this.counter.toString()
		this.counter++

		".loop_".print(this.stream)
		this.idloop.print(this.stream)
		":\n".print(this.stream)

		n.accept_children(this)

		"jmp .loop_".print(this.stream)
		this.idloop.println(this.stream)
		".loop_end_".print(this.stream)
		this.idloop.print(this.stream)
		":".println(this.stream)

		this.idloop = oldid

		return None<Node>
	}

	func Option<Node> visit(ReturnNode n) {
		"mov rax, ".print(this.stream)
		n.accept_children(this)
		"\njmp .ret".println(this.stream)
		return None<Node>
	}

	func Option<Node> visit(EnumNode n) {
		"section .data".println(this.stream)
		n.name.print(this.stream)
		":\ndq ".print(this.stream)
		var len = n.values.children.length.toString()
		len.print(this.stream)
		", ".print(this.stream)
		len.print(this.stream)
		", 24+".print(this.stream)
		n.name.print(this.stream)

		for (nn in n.values.children) {
			", ".print(this.stream)
			nn.accept(this)
		}

		"\nsection .text".println(this.stream)
		return None<Node>
	}

	func String createLabel(String orig) {
		var num = this.counter.toString()
		var len = num.length
		len += orig.length
		var joined = String_new(len)
		joined.append(orig).append(num)
		this.counter++
		return joined
	}
}
