func TypeCheck TypeCheck_new(Reporting report) {
	return TypeCheck_new(None<Type>, report)
}

class virtual TypeCheck < Visitor (Option<Type> fret_type, Reporting report) {
	func Option<Node> visit(BinaryOperationNode n) {
		var lhs = n.lhs.to(RetNode)
		var rhs = n.rhs.to(RetNode)

		if (
			n.op == ASSIGN ||
			n.op == EQUAL ||
			n.op == NOT_EQUAL ||
			n.op == GREATER ||
			n.op == GREATER_EQ ||
			n.op == LESS ||
			n.op == LESS_EQ
		) {
			lhs.ret_type.resolve(scope)

			if (lhs.ret_type.has_child(rhs.ret_type) == false) {
				this.report.printNotMatch(lhs, rhs)
			}
		}

		n.accept_children(this)
		return None<Node>
	}

	func Option<Node> visit(ReturnNode n) {
		var fret_type = this.fret_type.expect("Return node is not inside a function")
		if (fret_type.has_child(n.expr.to(RetNode).ret_type) == false) {
			this.report.printUnreturnable(n, fret_type)
		}

		n.accept_children(this)
		return None<Node>
	}

	func Option<Node> visit(FunctionNode n) {
		# Check all returns are of the correcct type
		var prev_fret = this.fret_type
		this.fret_type = Some(n.ret_type)
		n.accept_children(this)
		this.fret_type = prev_fret

		# Check that non-void functions return a value
		if (n.ret_type.raw.equal("void") == false)
		if (n.block.children.last.is_some() == true)
		if (n.block.children.last.unwrap().payload.type != nRETURN) {
				this.report.printNoReturn(n)
		}

		return None<Node>
	}
}
