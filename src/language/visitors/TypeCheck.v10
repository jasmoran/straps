require("src/stdlib/stdlib")
require("src/language/Node")
require("src/language/Reporting")

func TypeCheck TypeCheck_new(Reporting report) {
	var Visitor v = 0
	var tc = TypeCheck_new(v, Type_new(), report)
	tc.v = tc
	return tc
}

class virtual TypeCheck < Visitor (Visitor v, Type fret_type, Reporting report) {
	func void visit(BinaryOperationNode n) {
		var RetNode lhs = n.lhs
		var RetNode rhs = n.rhs

		if (
			n.op == ASSIGN ||
			n.op == EQUAL ||
			n.op == NOT_EQUAL ||
			n.op == GREATER ||
			n.op == GREATER_EQ ||
			n.op == LESS ||
			n.op == LESS_EQ
		) {
			lhs.ret_type.resolve(scope)

			if (lhs.ret_type.has_child(rhs.ret_type) == false) {
				this.report.printNotMatch(lhs, rhs)
			}
		}

		n.accept_children(this.v)
		return 0
	}

	func void visit(ReturnNode n) {
		var RetNode rn = n.expr
		if (this.fret_type.has_child(rn.ret_type) == false) {
			this.report.printUnreturnable(n, this.fret_type)
		}

		n.accept_children(this.v)
		return 0
	}

	func void visit(FunctionNode n) {
		var prev_fret = this.fret_type
		this.fret_type = n.ret_type
		n.accept_children(this.v)
		this.fret_type = prev_fret
		return 0
	}
}
