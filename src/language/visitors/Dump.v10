func Dump Dump_new()(?T, Any a, Array binops, Boolean top) {
	define V Dump
	include "src/language/visitors/init.v10"

	binops = Array_new(5)
	a = "add "
	binops.append(a)
	a = "sub "
	binops.append(a)
	a = "shl "
	binops.append(a)
	a = "shr "
	binops.append(a)
	a = "mov "
	binops.append(a)

	top = true

	v = Dump_new(?U, binops, top, 0, "ERRORlabel", "ERRORlabel", "ERRORlabel", true)
	v.v = v
	return v
}

class Dump(?T, Array binops, Boolean top, Number counter, String trueLabel, String falseLabel, String target, Boolean negate) {
	func void visit(Node n)() {
  	return 0
	}

	func void visit(BinaryOperationNode n)(String op, Number ix, Node nn, FunctionNode fun, String lastTrue, String lastFalse) {
		if (n.op == PAREN_OPEN) {
			fun = n.lhs
			"call ".print()
			fun.name.println()
		} else if (n.op == DOT) {
			"QWORD[".print()
			n.visit_children(this.v)
			"]".print()
		} else if (n.op == SQUARE_OPEN) {
			"QWORD[".print()
			n.visit_children(this.v)
			"]".print()
		} else if (n.op == OR) {
			lastFalse = this.falseLabel
			this.falseLabel = this.createLabel(".falseCond")

			this.target = this.trueLabel
			this.negate = false
			nn = n.lhs
			nn.m_visit(this)

			this.falseLabel.print()
			":".println()
			this.falseLabel = lastFalse

			this.target = this.trueLabel
			this.negate = false
			nn = n.rhs
			nn.m_visit(this)

			"jmp ".print()
			this.falseLabel.println()
		} else if (n.op == AND) {
			lastTrue = this.trueLabel
			this.trueLabel = this.createLabel(".trueCond")

			this.target = this.falseLabel
			this.negate = true
			nn = n.lhs
			nn.m_visit(this)

			this.trueLabel.print()
			":".println()
			this.trueLabel = lastTrue

			this.target = this.falseLabel
			this.negate = true
			nn = n.rhs
			nn.m_visit(this)
			"jmp ".print()

			this.trueLabel.println()
		} else {
			# Standard binops
			if (n.op >= ADD)
			if (n.op <= ASSIGN) {
				# Retrieve string representation of op
				ix = n.op
				ix -= ADD
				op = this.binops.get(ix)

				op.print()
				nn = n.lhs
				nn.m_visit(this)
				", ".print()
				nn = n.rhs
				nn.m_visit(this)
				"\n".print()
				return 0
			}

			# Comparisons
			if (n.op >= EQUAL)
			if (n.op <= LESS_EQ) {
				"cmp ".print()
				nn = n.lhs
				nn.m_visit(this)
				", ".print()
				nn = n.rhs
				nn.m_visit(this)
				"\n".print()

				if (this.negate == true) {
					if (n.op == EQUAL)      "jne ".print()
					if (n.op == NOT_EQUAL)  "je  ".print()
					if (n.op == GREATER)    "jle ".print()
					if (n.op == GREATER_EQ) "jl  ".print()
					if (n.op == LESS)       "jge ".print()
					if (n.op == LESS_EQ)    "jg  ".print()
				} else {
					if (n.op == EQUAL)      "je  ".print()
					if (n.op == NOT_EQUAL)  "jne ".print()
					if (n.op == GREATER)    "jg  ".print()
					if (n.op == GREATER_EQ) "jge ".print()
					if (n.op == LESS)       "jl  ".print()
					if (n.op == LESS_EQ)    "jle ".print()
				}

				this.target.println()
				return 0
			}

			# Check op token is valid
			error("Can't use ", n.op.toString(), " as a binary operator")
		}

  	return 0
	}

	func void visit(UnaryOperationNode n)() {
		if (n.op == INCREMENT) "inc ".print()
		else if (n.op == DECREMENT) "dec ".print()
		else if (n.op == PUSH) "push ".print()
		else error("Can't use ", n.op.toString(), " as a unary operator")

		n.visit_children(this.v)
		"\n".print()
  	return 0
	}

	func void visit(StringNode n)() {
		if (n.type == nNUMBER) {
			if (n.string.get(0) != '-') {
				"+".print()
			}
		}
		if (n.type == nINDEX) {
			if (n.string.get(0) != '-') {
				"+".print()
			}
		}
		n.string.print()
  	return 0
	}

	func void visit(ClassNode n)() {
  	return 0
	}

	func void visit(FunctionNode n)(Number size) {
		if (n.name.equal("main") == 1) {
			"_start".print()
		} else {
			n.name.print()
		}
		":\npush rbp\nmov rbp, rsp\nsub rsp, ".print()
		size = n.vars.children.length
		size << 3
		size.toString().println()
		"push r12\npush r13".println()

		# Dump block
		n.block.visit(this.v)

		".ret:".println()
		if (n.name.equal("main") == 1) {
			"mov rdi, rax\nmov rax, 60\nsyscall".println()
		} else {
			"pop r13\npop r12\nmov rsp, rbp\npop rbp\nret ".print()
			size = n.args.children.length
			size << 3
			size.toString().println()
		}
  	return 0
	}

	func void visit(ListNode n)() {
		if (this.top == true) {
			"global _start".println()
			this.top = false
		}

		n.visit_children(this.v)
  	return 0
	}

	func void visit(IfNode n)(Node nn, String endLabel) {
		this.trueLabel = this.createLabel(".trueLabel")
		this.falseLabel = this.createLabel(".falseLabel")
		this.counter++

		this.target = this.falseLabel
		this.negate = true
		nn = n.condition
		nn.m_visit(this)

		this.trueLabel.print()
		":".println()
		n.block_if.visit(this.v)

		endLabel = this.createLabel("endIf")
		if (n.block_else != 0) {
			"jmp ".print()
			endLabel.println()
		}
		this.falseLabel.print()
		":".println()
		if (n.block_else != 0) {
			n.block_else.visit(this.v)
			endLabel.print()
			":".println()
		}

  	return 0
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ReturnNode n)() {
		"mov rax, ".print()
		n.visit_children(this.v)
		"\njmp .ret".println()
  	return 0
	}

	func void visit(EnumNode n)() {
		#n.visit_children(this.v)
		return 0
	}

	func String createLabel(String orig)(String num, Number len, String joined) {
		num = this.counter.toString()
		len = num.length
		len += orig.length
		joined = String_new(len)
		joined.append(orig).append(num)
		this.counter++
		return joined
	}
}
