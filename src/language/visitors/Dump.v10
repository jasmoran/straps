func Dump Dump_new(Stream stream)(Boolean top) {
	var binops = Array<String>_new(5)
	binops.append(" + ")
	binops.append(" - ")
	binops.append(" << ")
	binops.append(" >> ")
	binops.append(" = ")

	top = true

	var Visitor v = 0
	var dump = Dump_new(v, binops, top, 0, "ERRORlabel", "ERRORlabel", "ERRORlabel", true, stream, " ")
	dump.v = dump
	return dump
}

class virtual Dump < Visitor (Visitor v, Array<String> binops, Boolean top, Number counter,
					 String trueLabel, String falseLabel, String target, Boolean negate,
					 Stream stream, String idloop) {
	func void visit(Node n)() {
		if (n.type == nNEXT) {
			"next;".print(this.stream)
		} else if (n.type == nBREAK) {
			"break;".print(this.stream)
		}

		return 0
	}

	func void visit(CallNode n) {
		if (n.cfunction.type == nFUNCTION) {
			var FunctionNode fun = n.cfunction
			fun.name.print(this.stream)
			"(".print(this.stream)
			for (arg in n.args) {
				arg.accept(this.v)
			}
			")".print(this.stream)
		} else {
			n.cfunction.accept(this.v)
		}
		"\n".print(this.stream)
	}

	func void visit(BinaryOperationNode n)(String op, Number ix, Node nn, FunctionNode fun, String lastTrue, String lastFalse, StringNode num) {
		if (n.op == DOT || n.op == SQUARE_OPEN) {
			n.lhs.accept(this.v)
			".".print(this.stream)
			num = n.rhs
			num.string.print(this.stream)
		} else if (n.op == OR) {
			"(".println(this.stream)
			n.lhs.accept(this.v)
			" || ".println(this.stream)
			n.rhs.accept(this.v)
			")".println(this.stream)
		} else if (n.op == AND) {
			"(".println(this.stream)
			n.lhs.accept(this.v)
			" && ".println(this.stream)
			n.rhs.accept(this.v)
			")".println(this.stream)
		} else {
			# Standard binops
			if (n.op >= ADD)
			if (n.op <= ASSIGN) {
				# Retrieve string representation of op
				ix = n.op
				ix -= ADD
				op = this.binops.get(ix)

				n.lhs.accept(this.v)
				op.print(this.stream)
				n.rhs.accept(this.v)
				";".println(this.stream)

				return 0
			}

			# Comparisons
			if (n.op >= EQUAL)
			if (n.op <= LESS_EQ) {
				n.lhs.accept(this.v)

				if (n.op == EQUAL)      " == ".print(this.stream)
				if (n.op == NOT_EQUAL)  " != ".print(this.stream)
				if (n.op == GREATER)    " > ".print(this.stream)
				if (n.op == GREATER_EQ) " >= ".print(this.stream)
				if (n.op == LESS)       " < ".print(this.stream)
				if (n.op == LESS_EQ)    " <= ".print(this.stream)

				n.rhs.accept(this.v)

				return 0
			}

			# Check op token is valid
			error("Can't use ", n.op.toString(), " as a binary operator")
		}

		return 0
	}

	func void visit(UnaryOperationNode n)() {
		if (n.op == INCREMENT) "++".print(this.stream)
		else if (n.op == DECREMENT) "--".print(this.stream)
		else error("Can't use ", n.op.toString(), " as a unary operator")

		n.accept_children(this.v)
		";".println(this.stream)

		return 0
	}

	func void visit(StringNode n) {
		if (n.type == nCHARACTER) {
			"'".print(this.stream)
			n.string.print(this.stream)
			"'".print(this.stream)
		} else if (n.type == nSTRING) {
			"\"".print(this.stream)
			n.string.print(this.stream)
			"\"".print(this.stream)
		} else if (n.type == nNASM) {
			n.string.println(this.stream)
		} else {
			if (this.negate == false) {
				n.ret_type.basicString().print(this.stream)
				" ".print(this.stream)
			}
			n.string.print(this.stream)
		}
		return 0
	}

	func void visit(ClassNode n)() {
		n.name.print(this.stream)
		"Static".print(this.stream)

		return 0
	}

	func void visit(StaticClassNode n)() {
		"section .bss".println(this.stream)
		n.klass.name.print(this.stream)
		"Static:\nresq ".print(this.stream)
		n.klass.fields.children.length.toString().println(this.stream)
		"section .text".println(this.stream)

		if (n.klass.vtable == 0) return 0
		"section .data\n_vtable_".print(this.stream)
		n.klass.name.print(this.stream)
		":\ndq ".print(this.stream)

		var array = n.klass.vtable.values
		var ix = 0
		loop {
			if (ix == array.length) { break }
			var FunctionNode funnode = array.get(ix)
			funnode.name.print(this.stream)
			", ".print(this.stream)
			ix++
		}

		"0\nsection .text".println(this.stream)
		return 0
	}

	func void visit(FunctionNode n) {
		n.ret_type.basicString().print(this.stream)
		" ".print(this.stream)
		n.name.print(this.stream)
		this.negate = false
		"(".print(this.stream)
		for (arg in n.args.children) {
			arg.accept(this.v)
			if (arg != n.args.children.last.payload) ", ".print(this.stream)
		}
		") {".println(this.stream)

		for(vrbl in n.vrbls.children) {
			vrbl.accept(this.v)
			";".println(this.stream)
		}
		this.negate = true

		# Dump block
		n.block.accept(this.v)

		"}".println(this.stream)

		return 0
	}

	func void visit(ListNode n)(LinkedListNode<Node> lln, StringNode nn, Number ix, String s) {
		if (n.type == nSYS) {
			"syscall(".print(this.stream)
			for (item in n.children) {
				var StringNode nn = item
				nn.accept(this.v)
				if (item != n.children.last.payload) ", ".print(this.stream)
			}
			");".println(this.stream)
		} else if (n.type == nGLOBAL) {
			for (item in n.children) {
				item.accept(this.v)
				";".println(this.stream)
			}
		} else {
			n.accept_children(this.v)
		}

		return 0
	}

	func void visit(IfNode n) {
		"if (".print(this.stream)
		n.condition.accept(this.v)
		") {".println(this.stream)
		n.block_if.accept(this.v)
		"}".print(this.stream)

		if (n.block_else != 0) {
			" else {".println(this.stream)
			n.block_else.accept(this.v)
			"}".println(this.stream)
		}

		return 0
	}

	func void visit(LoopNode n)(String oldid) {
		"while (1) {".println(this.stream)
		n.accept_children(this.v)
		"}".println(this.stream)

		return 0
	}

	func void visit(ReturnNode n)() {
		"return ".print(this.stream)
		n.accept_children(this.v)
		"\n".print(this.stream)

		return 0
	}

	func void visit(EnumNode n) {
		"enum ".print(this.stream)
		n.name.print(this.stream)
		" {".print(this.stream)
		for (item in n.values.children) {
			item.accept(this.v)
			", ".print(this.stream)
		}
		"}".println(this.stream)

		return 0
	}
}
