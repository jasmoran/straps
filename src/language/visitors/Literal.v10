func Literal Literal_new()(?T, Node string_class, Node number_class, Node character_class) {
	define V Literal
	include "src/language/visitors/init.v10"

	string_class = scope.get("String")
	if (string_class <= 0) error("Could not resolve type String")
	number_class = scope.get("Number")
	if (number_class <= 0) error("Could not resolve type Number")
	character_class = scope.get("Character")
	if (character_class <= 0) error("Could not resolve type Character")

	v = Literal_new(?U, string_class, number_class, character_class)
	v.v = v
	return v
}

class Literal(?T, Node string_class, Node number_class, Node character_class) {
	func void visit(Node n)() {
	}

	func void visit(BinaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(UnaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(StringNode n)() {
	}

	func void visit(ClassNode n)() {
		n.visit_children(this.v)
	}

	func void visit(FunctionNode n)() {
		n.visit_children(this.v)
	}

	func void visit(ListNode n)() {
		n.visit_children(this.v)
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
	}

	func void visit(EnumNode n)() {
		n.visit_children(this.v)
	}
}
