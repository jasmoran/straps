func Method Method_new()(ListNode ln, ClassNode cn) {
	ln = 0
	cn = 0
	var Visitor v = 0
	var meth = Method_new(v, ln, cn)
	meth.v = meth
	return meth
}

class virtual Method < Visitor (Visitor v, ListNode pb, ClassNode cls) {
	func void visit(ClassNode n)() {
		this.cls = n

		if (n.parent.raw != 0) {
			# Resolve parent type
			n.parent.resolve(scope)

			# Link scopes
			if (n.parent.res < 0) error("Negative n.parent.res")
			if (n.parent.res == 0) error("Zero n.parent.res")
			n.scope.parent = n.parent.res.scope

			# Inherit vtable
			if (n.vtable != 0) {
				var par_vtab = n.parent.res.vtable
				if (par_vtab != 0) {
					n.vtable = par_vtab.shallow_clone()
				}
			}
		}

		# Process each method
		n.block.accept_children(this.v)

		# Remove methods from now class now they have been copied to parent block
		n.block.children.clear()
		this.cls = 0

  	return 0
	}

	func void visit(FunctionNode n)(Number length, StringNode arg, FunctionNode clone) {
		var pure = n.name.clone()
		n.pure = pure

		# Leave main function alone
		if (n.name.equal("main") == true) return 0
		if (n.name.get(0) == '_') return 0

		if (this.cls != 0) {
			# Add 'this' to arguments
			n.args.prepend(
				StringNode_new(nIDENTIFIER, n.position.clone("Method this"), Type_new(this.cls.name), "this").toNode()
			)
		}

		n.name = String_new(256).append(n.name)
		var cls_scope_name = String_new(256).append(n.name)

		# Loop through arguments
		var lln = n.args.children.first
		loop {
			if (lln == 0) { break }
			arg = lln.payload

			# Append arguments type to function name
			n.name.append('_').append(arg.ret_type.raw)

			if (lln != n.args.children.first) {
				cls_scope_name.append('_').append(arg.ret_type.raw)
			}

			lln = lln.fwrd
		}

		if (this.cls != 0) {
			clone = n.shallow_clone()

			if (this.cls.vtable == 0) {
				# Add method (direct) to scope of class
				this.cls.scope.set(pure, clone, 1337)
			} else {
				# Add method to vtable of class
				this.cls.vtable.set(cls_scope_name, n)

				# Find method offset in vtable
				var offset = this.cls.vtable.get_pos(cls_scope_name)
				offset << 3

				# Add method (via vtable) to scope of class
				var vtab = n.shallow_clone()
				vtab.type = nVTAB_ACCESS
				vtab.name = offset.toString()
				this.cls.scope.set(pure, vtab, 1337)
			}

			# Save new method name "_CLASS_METHOD"
			length = n.name.length
			length += 2
			n.name = this.cls.name.clone(length).prepend('_').append('_').append(n.name)
			clone.name = n.name

			# Copy method to parent block
			this.pb.append(n.toNode())
		}

  	return 0
	}

	func void visit(ListNode n)(ListNode old_pb) {
		old_pb = this.pb
		if (n.type == nBLOCK)
			this.pb = n

		n.accept_children(this.v)

		this.pb = old_pb

  	return 0
	}
}
