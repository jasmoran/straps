func Method Method_new() {
	return Method_new(None<BlockNode>, None<ClassNode>)
}

class virtual Method < Visitor (Option<BlockNode> pb, Option<ClassNode> cls) {
	func Option<Node> visit(ClassNode n) {
		this.cls = Some(n)

		if (n.parent.is_some() == true) {
			var parent = n.parent.unwrap()

			# Resolve parent type
			parent.resolve(scope)

			if (parent.res.is_some() == true) {
				# Link scopes
				n.block.scope.parent = parent.getScope()

				# Inherit vtable
				if (n.vtable.is_some() == true) {
					var par_vtab = parent.res.unwrap().vtable
					if (par_vtab.is_some() == true) {
						n.vtable = Some(par_vtab.unwrap().shallow_clone().to(VirtualTable))
					}
				}
			}
		}

		# Process each method
		n.block.accept_children(this)

		# Remove methods from now class now they have been copied to parent block
		n.block.children.clear()
		this.cls = None<ClassNode>

  	return None<Node>
	}

	func Option<Node> visit(FunctionNode n) {
		if (this.cls.is_some() == true) {
			# Add 'this' to arguments
			n.args.prepend(
				StringNode_new(nIDENTIFIER, n.position.clone("Method this"), Type_new(this.cls.unwrap().name), "this")
			)

			var cls = this.cls.unwrap()
			var clone = n.shallow_clone()

			if (cls.vtable.is_none() == true) {
				# Add method (direct) to scope of class
				cls.block.scope.set(n.name, clone)
			} else {
				# Add method to vtable of class
				cls.vtable.unwrap().add(n)

				# Find method offset in vtable
				var offset = cls.vtable.unwrap().get_ix(n)
				offset << 3

				# Add method (via vtable) to scope of class
				clone.type = nVTAB_ACCESS
				clone.name = offset.toString()
				cls.block.scope.set(n.name, clone)
			}

			# Copy method to parent block
			this.pb.expect("Attempted to append method outside of a block").append(n)
		}

  	return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var old_pb = this.pb
		this.pb = Some(n)

		n.accept_children(this)

		this.pb = old_pb

  	return None<BlockNode>
	}
}
