func Resolving Resolving_new(Reporting report) {
	return Resolving_new(scope, report)
}

class virtual Resolving < Visitor (Scope scope, Reporting report) {
	func Option<Node> visit(StringNode n) {
		n.ret_type.resolve(this.scope)

		if (n.type == nIDENTIFIER) {
			var opt = this.scope.resolve(n)

			if (opt.is_some() == true) {
				var new = opt.unwrap().to(StringNode)

				# Fields - new is a StringNode(type: nINDEX, string: offset)
				if (new.type == nINDEX) {
					n.type = nINDEX
					n.offset = Some(new.string)
					if (n.ret_type.strength != CAST) n.ret_type = new.ret_type

				# new.type == nBINARYOP => variable (rbp - 8)
				#          == nARGUMENT => argument (rbp + 16)
				#          == nNUMBER   => enum
				#          == nREGISTER => register
				} else {
					new = new.clone()
					new.position = n.position
					if (n.ret_type.strength == CAST) new.ret_type = n.ret_type

					return Some(new.to(Node))
				}

			} else {
				this.report.printUndefinedIdentifier(n, this.scope)
			}
		}

		return None<Node>
	}

	func Option<Node> visit(FunctionNode n) {
		n.ret_type.resolve(this.scope)

		# Dont resolve identifiers in args
		for (arg in n.args) arg.ret_type.resolve(this.scope)
		n.block.accept(this)

		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var prev_scope = this.scope
		this.scope = n.scope

		n.accept_children(this)

		this.scope = prev_scope
		return None<BlockNode>
	}

	func Option<Node> visit(CallNode n) {
		# Function name, default to normal function
		var name = n.cfunction.to(StringNode)

		# If a method, function name location is different
		var binop = n.cfunction.to(BinaryOperationNode)
		if (binop.type == nBINARYOP && binop.op == DOT) {
			var bname = binop.rhs.to(StringNode)
			name = bname
		}

		if (name.type != nIDENTIFIER) {
			error("CallNode function name is not an identifier it is ",
				name.type.toString(), " at ", n.position.start.toString())
		}

		# Resolve arguments
		n.accept_args(this)

		# Resolve function
		if (binop.type == nBINARYOP && binop.op == DOT) {
			# Resolve first item
			var orig_type = binop.lhs.to(RetNode).ret_type
			binop.lhs = binop.lhs.accept(this).unwrap_or(binop.lhs)
			var lhs = binop.lhs.to(RetNode)
			if (orig_type.strength == CAST) lhs.ret_type = orig_type

			# If function is a DOT, add its LHS to arguments (this)
			var nn = binop.lhs.to(StringNode)
			n.args.prepend(nn)

			# Set sc to that of the first items type
			lhs.ret_type.resolve(this.scope)
			var opt_sc = lhs.ret_type.getScope()
			var sc = opt_sc.unwrap_or(this.scope)
			if (opt_sc.is_none() == true) {
				this.report.printInvalidType(binop.lhs.position, binop.rhs.position, lhs.ret_type)
				return None<Node>
			}

			# Resolve function
			var rhs = binop.rhs.to(RetNode)
			orig_type = rhs.ret_type
			var orig_pos = n.position
			var opt = sc.resolve(name, n.args)
			if (opt.is_some() == true) {
				rhs = opt.unwrap()
			} else {
				this.report.printUndefinedFunction(name, n.args, sc)
				rhs = name.clone()
			}
			binop.rhs = rhs
			if (orig_type.strength == CAST) rhs.ret_type = orig_type

			# Inherit ret_type from rhs
			binop.ret_type = binop.rhs.to(RetNode).ret_type
		} else {
			# Resolve function
			var rn = n.cfunction.to(RetNode)
			var orig_type = rn.ret_type
			var opt = this.scope.resolve(name, n.args)
			if (opt.is_some() == true) {
				rn = opt.unwrap()
			} else {
				this.report.printUndefinedFunction(name, n.args, this.scope)
				rn = name.clone()
			}
			n.cfunction = rn
			if (orig_type.strength == CAST) rn.ret_type = orig_type
		}


		# Fix up dot if it resolved to a function
		binop = n.cfunction.to(BinaryOperationNode)
		if (binop.type == nBINARYOP && binop.op == DOT) {
			if (binop.rhs.type == nFUNCTION) {
				n.cfunction = binop.rhs
			}

			# Virtual methods
			if (binop.rhs.type == nVTAB_ACCESS) {
				# TODO: Use pos from CallNode
				var nullpos = Position_new(MetaCharacter_new('?', 0, 0), "Resolving vtab")
				var pos = PositionRange_new(nullpos, nullpos)
				var vtab_off = binop.rhs.to(FunctionNode)
				n.cfunction = BinaryOperationNode_new(
					vtab_off.ret_type, pos, SQUARE_OPEN,
					BinaryOperationNode_new(Type_new(), pos, SQUARE_OPEN,
						binop.lhs,
						StringNode_new(nNUMBER, pos, Type_new(), "0")
					),
					StringNode_new(nNUMBER, pos, Type_new(), vtab_off.name)
				)
			}
		}

		# Inherit ret_type from function
		if (n.ret_type.strength < CAST) n.ret_type = n.cfunction.to(RetNode).ret_type

		return None<Node>
	}

	func Option<Node> visit(BinaryOperationNode n) {
		# Handle fields
		if (n.op == DOT) {
			# Resolve first item
			var orig_type = n.lhs.to(RetNode).ret_type
			n.lhs = n.lhs.accept(this).unwrap_or(n.lhs)
			if (orig_type.strength == CAST) n.lhs.to(RetNode).ret_type = orig_type

			# Save current scope
			var prev_scope = this.scope

			# Set scope to that of the first items type
			var lhs_type = n.lhs.to(RetNode).ret_type
			lhs_type.resolve(this.scope)
			var opt_sc = lhs_type.getScope()
			if (opt_sc.is_none() == true) {
				this.report.printInvalidType(n.lhs.position, n.rhs.position, lhs_type)
				return None<Node>
			}
			this.scope = opt_sc.unwrap()

			# Resolve second item
			orig_type = n.rhs.to(RetNode).ret_type
			n.rhs = n.rhs.accept(this).unwrap_or(n.rhs)
			if (orig_type.strength == CAST) n.rhs.to(RetNode).ret_type = orig_type

			# Inherit ret_type from rhs
			if (n.ret_type.strength < CAST) n.ret_type = n.rhs.to(RetNode).ret_type

			# Restore scope
			this.scope = prev_scope

			return None<Node>
		}

		# Handle arithmetic
		if (n.op == ASTERISK || n.op == FWD_SLASH || n.op == PLUS || n.op == MINUS) {
			n.accept_children(this)

			n.ret_type = n.lhs.to(RetNode).ret_type

			return None<Node>
		}

		# Infer types
		if (n.op == ASSIGN && n.lhs.type == nIDENTIFIER) {
			var field = n.lhs.to(StringNode)
			if (field.ret_type.strength == INFER) {
				# Resolve variable (LHS)
				var opt = this.scope.resolve(field)
				if (opt.is_some() == true) {
					n.lhs = opt.unwrap()
				} else {
					this.report.printUndefinedIdentifier(field, this.scope)
					n.lhs = field
				}

				# Resolve value (RHS)
				var orig_type = n.rhs.to(RetNode).ret_type
				n.rhs = n.rhs.accept(this).unwrap_or(n.rhs)
				if (orig_type.strength == CAST) n.rhs.to(RetNode).ret_type = orig_type

				# Assign type of value to variable
				n.lhs.to(RetNode).ret_type = n.rhs.to(RetNode).ret_type

				return None<Node>
			}
		}

		n.accept_children(this)

		return None<Node>
	}

	func Option<ListNode> visit(ListNode n) {
		if (n.type != nGLOBAL) {
			n.accept_children(this)
		}

		return None<ListNode>
	}

	# Must NOT resolve the children of the EnumNode
	# They are used raw in the Dump visitor to form the name lookup array
	func Option<Node> visit(EnumNode n) {
		return None<Node>
	}
}
