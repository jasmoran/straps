func Resolving Resolving_new()(Scope sc) {
	sc = scope
	var Visitor v = 0
	var res = Resolving_new(v, sc, true)
	res.v = res
	return res
}

class virtual Resolving < Visitor (Visitor v, Scope scope, Boolean resolve_idents) {
	func void visit(StringNode n)(Node replacement) {
		var orig_type = n.ret_type
		orig_type.resolve(this.scope)
		if (n.type == nIDENTIFIER) {
			if (this.resolve_idents == true) {
				var orig_pos = n.position
				var ListNode new = this.scope.resolve(n.string)
				if (new == 0 || new.type == nBLOCK) {
					"- start:".println()
					printPos(orig_pos)

					"  end:\n    file: ".print()
					orig_pos.stream.println()
					"    line: ".print()
					orig_pos.start.get_line().toString().println()
					var endChar = orig_pos.start.get_column()
					endChar += n.string.length
					"    char: ".print()
					endChar.toString().println()
		
					"  level: error".println()

					"  message: ".print()
					if (new == 0) {
						"Could not resolve ".print()
						n.string.println()
						"  options:".println()
						for (ix in Range_new(this.scope.scope.keys.length)) {
							var ListNode item = this.scope.scope.values.get(ix)
							var name = this.scope.scope.keys.get(ix)
							if (item.type == nBLOCK) {
								for (nopt2 in item.children) {
									opt = nopt2
									"  - name: ".print()
									name.println()
									"    type: ".print()
									opt.ret_type.raw.println()
									"    args:".println()
									for (narg in opt.args.children) {
										if (narg == opt.args.children.first.payload) next
										
										arg = narg
										"    - name: ".print()
										arg.string.println()
										"      type: ".print()
										arg.ret_type.raw.println()
									}
								}
							} else {
								var StringNode sitem = item
								"  - name: ".print()
								name.println()
								"    type: ".print()
								sitem.ret_type.raw.println()
							}
						}
					} else {
						n.string.print()
						" is a function".println()
						"  options:".println()
						for (nopt in new.children) {
							var FunctionNode opt = nopt
							"  - name: ".print()
							n.string.println()
							"    type: ".print()
							opt.ret_type.raw.println()
							"    args:".println()
							for (narg in opt.args.children) {
								if (narg == opt.args.children.first.payload) next
								
								var StringNode arg = narg
								"    - name: ".print()
								arg.string.println()
								"      type: ".print()
								arg.ret_type.raw.println()
							}
						}
					}
				} else {
					n = new.clone()
				}
				n.position = orig_pos
			}
			if (orig_type.cast == true) n.ret_type = orig_type
		}
		return n
	}

	func void visit(FunctionNode n)(Scope prev_scope, ListNode block) {
		prev_scope = this.scope
		this.scope = n.scope
		n.ret_type.resolve(this.scope)

		# Dont resolve identifiers in vars and args
		this.resolve_idents = false
		n.args.accept(this.v)
		n.vrbls.accept(this.v)
		this.resolve_idents = true
		n.block.accept(this.v)

		this.scope = prev_scope
		return n
	}

	func void visit(CallNode n) {
		# Function name, default to normal function
		var StringNode name = n.cfunction

		# If a method, function name location is different
		var BinaryOperationNode binop = n.cfunction
		if (binop.type == nBINARYOP && binop.op == DOT) {
			name = binop.rhs
		}

		if (name.type != nIDENTIFIER) {
			error("CallNode function name is not an identifier it is ",
				name.type.toString(), " at ", n.position.toString())
		}

		# Resolve arguments
		n.accept_args(this.v)

		# Resolve function
		if (binop.type == nBINARYOP && binop.op == DOT) {
			# Resolve first item
			var RetNode rn = binop.lhs
			var orig_type = rn.ret_type
			binop.lhs = binop.lhs.accept(this.v)
			rn = binop.lhs
			if (orig_type.cast == true) rn.ret_type = orig_type

			# If function is a DOT, add its LHS to arguments (this)
			var StringNode nn = binop.lhs
			n.args.prepend(nn)

			# Set sc to that of the first items type
			rn.ret_type.resolve(this.scope)
			var sc = rn.ret_type.getScope()
			if (sc == 0) sc = this.scope

			# Resolve function
			rn = binop.rhs
			orig_type = rn.ret_type
			var orig_pos = n.position
			var new = sc.resolve(name.string, n.args)
			if (new == 0) {
				"- start:".println()
				printPos(orig_pos)

				"  end:\n    file: ".print()
				orig_pos.stream.println()
				"    line: ".print()
				orig_pos.start.get_line().toString().println()
				var endChar = orig_pos.start.get_column()
				endChar += name.string.length
				"    char: ".print()
				endChar.toString().println()
	
				"  level: error".println()

				"  message: ".print()
				if (new == 0) {
					"Could not resolve ".print()
					name.string.println()
				} else {
					name.string.print()
					" is a function".println()
				}

				"  options:".println()
				for (fname in sc.scope.keys) {
					"  - ".print()
					fname.println()
				}
			} else {
				binop.rhs = new
				rn = new
			}
			if (orig_type.cast == true) rn.ret_type = orig_type

			# Inherit ret_type from rhs
			rn = binop.rhs
			binop.ret_type = rn.ret_type
		} else {
			# Resolve function
			var RetNode rn = n.cfunction
			var orig_type = rn.ret_type
			n.cfunction = this.scope.resolve(name.string, n.args)
			rn = n.cfunction
			if (orig_type.cast == true) rn.ret_type = orig_type
		}


		# Fix up dot if it resolved to a function
		binop = n.cfunction
		if (binop.type == nBINARYOP && binop.op == DOT) {
			if (binop.rhs.type == nFUNCTION) {
				n.cfunction = binop.rhs
			}

			# Virtual methods
			if (binop.rhs.type == nVTAB_ACCESS) {
				# TODO: Use pos from CallNode
				var pos = Position_new(MetaCharacter_new('?', 0, 0), "Resolving vtab")
				var FunctionNode vtab_off = binop.rhs
				n.cfunction = BinaryOperationNode_new(
					vtab_off.ret_type, pos, SQUARE_OPEN,
					BinaryOperationNode_new(Type_new(), pos, SQUARE_OPEN,
						binop.lhs,
						StringNode_new(nNUMBER, pos, Type_new(), "0").toNode()
					).toNode(),
					StringNode_new(nNUMBER, pos, Type_new(), vtab_off.name).toNode()
				).toNode()
			}
		}

		# Inherit ret_type from function
		var RetNode rn = n.cfunction
		n.ret_type = rn.ret_type

		return n
	}

	func void visit(BinaryOperationNode n)(Scope prev_scope, StringNode sn,
																				 StringNode field, Node nn, Number num) {
		# Handle fields
		if (n.op == DOT) {
			# Resolve first item
			sn = n.lhs
			var orig_type = sn.ret_type
			n.lhs = sn.accept(this.v)
			sn = n.lhs
			if (orig_type.cast == true) sn.ret_type = orig_type

			# Save current scope
			prev_scope = this.scope

			# Set scope to that of the first items type
			sn = n.lhs
			sn.ret_type.resolve(this.scope)
			this.scope = sn.ret_type.getScope()
			if (this.scope == 0) this.scope = prev_scope

			# Resolve second item
			sn = n.rhs
			orig_type = sn.ret_type
			n.rhs = sn.accept(this.v)
			sn = n.rhs
			if (orig_type.cast == true) sn.ret_type = orig_type

			# Inherit ret_type from rhs
			sn = n.rhs
			n.ret_type = sn.ret_type

			# Restore scope
			this.scope = prev_scope

			return n
		}

		# Infer types
		if (n.op == ASSIGN)
		if (n.lhs.type == nIDENTIFIER) {
			field = n.lhs
			if (field.ret_type.raw == 1) {
				n.lhs = this.scope.resolve(field.string)
				field = n.lhs

				sn = n.rhs
				orig_type = sn.ret_type
				n.rhs = sn.accept(this.v)
				sn = n.rhs
				if (orig_type.cast == true) sn.ret_type = orig_type

				field.ret_type = sn.ret_type

				return n
			}
		}

		n.accept_children(this.v)

		return n
	}

	func void visit(ListNode n)() {
		if (n.type != nGLOBAL) {
			n.accept_children(this.v)
		}

		return n
	}

	# Must NOT resolve the children of the EnumNode
	# They are used raw in the Dump visitor to form the name lookup array
	func void visit(EnumNode n) {
		return n
	}
}
