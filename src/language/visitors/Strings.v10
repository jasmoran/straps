func Strings Strings_new()(?T) {
	define V "Strings"
	include "src/language/visitors/init.v10"
	v = Strings_new(?U, 0, ListNode_new(nSTRINGS), true, false)
	v.v = v
	return v
}

class Strings(?T, Number counter, ListNode strings, Boolean root, Boolean do_idents) {
	func void addString(StringNode n)() {
		this.strings.append(StringNode_new(nSTRING, Type_new(), n.string).toNode())
		n.string = "string_".clone(4).append(this.counter.toString())
		n.type = nIDENTIFIER
		this.counter++
	}

	func void visit(StringNode n)() {
		if (n.type == nSTRING) this.addString(n)
		if (n.type == nIDENTIFIER) {
			if (this.do_idents == true) this.addString(n)
		}

		return 0
	}

	func void visit(ListNode n)() {
		if (n.type == nBLOCK) {
			if (this.root == true) {
				n.append(this.strings.toNode())
				this.root = false
			}
		} else if (n.type == nSTRINGS) {
			return 0
		}

		n.visit_children(this.v)
  	return 0
	}

	func void visit(EnumNode n)() {
		this.do_idents = true
		n.visit_children(this.v)
		this.do_idents = false
		return 0
	}




	func void visit(Node n)() {
  	return 0
	}

	func void visit(BinaryOperationNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(UnaryOperationNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ClassNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(FunctionNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
  	return 0
	}
}
