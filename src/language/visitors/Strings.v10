func Strings Strings_new()() {
	var pos = Position_new(MetaCharacter_new('?', 0, 0), "Strings")
	return Strings_new(0, ListNode_new(nSTRINGS, pos), true, false)
}

class virtual Strings < Visitor (Number counter, ListNode strings, Boolean root, Boolean do_idents) {
	func void addString(StringNode n)() {
		var pos = Position_new(MetaCharacter_new('?', 0, 0), "Strings")
		this.strings.append(StringNode_new(nSTRING, pos, Type_new(), n.string))
		n.string = "string_".clone(4).append(this.counter.toString())
		n.type = nIDENTIFIER
		this.counter++
	}

	func Option<Node> visit(StringNode n)() {
		if (n.type == nSTRING) this.addString(n)
		if (n.type == nIDENTIFIER) {
			if (this.do_idents == true) this.addString(n)
		}

		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		if (this.root == true) {
			n.append(this.strings)
			this.root = false
		}

		n.accept_children(this)

		return None<BlockNode>
	}

	func Option<ListNode> visit(ListNode n) {
		if (n.type != nSTRINGS) {
			n.accept_children(this)
		}

		return None<ListNode>
	}

	func Option<Node> visit(EnumNode n)() {
		this.do_idents = true
		n.accept_children(this)
		this.do_idents = false
		return None<Node>
	}
}
