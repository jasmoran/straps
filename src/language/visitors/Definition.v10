func Definition Definition_new(Scope scope)() {
	var Visitor v = 0
	var defn = Definition_new(v, scope)
	defn.v = defn
	return defn
}

# Gets all local & global variables, arguments, fields and enum values
# and adds them to their respective scopes.
# These "variables" are stored as { name => offset/label }
class virtual Definition < Visitor (Visitor v, Scope scope) {
	func void visit(ClassNode n)(Number ix, StringNode field) {
		ix = 0

		var lln = n.fields.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store field offset in class scope
			n.scope.set(
				field.string,
				StringNode_new(nINDEX, field.position.clone("Definition"), field.ret_type, ix.toString()).toNode()
			)

			ix += 8

			lln = lln.fwrd
		}

  	return 0
	}

	func void visit(EnumNode n)(Number ix, StringNode field, Type type) {
		ix = 0

		type = Type_new(n.name)

		var lln = n.values.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store value in global scope
			this.scope.set(
				field.string,
				StringNode_new(nNUMBER, field.position.clone("Definition"), type, ix.toString()).toNode()
			)

			ix++

			lln = lln.fwrd
		}

  	return 0
	}

	func void visit(FunctionNode n)(Number ix, StringNode field) {
		# Loop through arguments
		ix = 16
		var lln = n.args.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store value in function scope
			n.scope.set(
				field.string,
				this.new_variable(ix, field)
			)

			ix += 8

			lln = lln.fwrd
		}

		# Store cloned FunctionNode in the global scope
		if (n.pure == 0) error("Null pure")
		this.scope.set(n.pure, n.shallow_clone())

		# Loop through variables
		ix = 0
		lln = n.vrbls.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			ix -= 8

			# Store value in function scope
			n.scope.set(
				field.string,
				this.new_variable(ix, field)
			)

			lln = lln.fwrd
		}

  	return 0
	}

	func void visit(ListNode n)(StringNode field) {
		var lln = n.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload
			# TODO: Fix SEGFAULT
			#var pos = field.position.clone("Definition")
			var pos = Position_new(MetaCharacter_new('?', 0, 0), "Definition")

			if (n.type == nGLOBAL) {
				# Store global variable in global scope
				this.scope.set(
					field.string,
					BinaryOperationNode_new(
						field.ret_type,
						pos,
						SQUARE_OPEN,
						field.toNode(),
						StringNode_new(nNUMBER, pos, Type_new("Number"), "0").toNode()
					).toNode()
				)
			} else {
				field.accept(this.v)

				# Truncate class nodes once they have been visited
				if (field.type == nCLASS) {
					var ClassNode cn = field
					lln.payload = cn.shallow_clone()
				}
			}

			lln = lln.fwrd
		}

		return 0
	}




	func Node new_variable(Number offset, StringNode field)() {
		var pos = field.position.clone("Definition")
		return BinaryOperationNode_new(
			field.ret_type,
			pos,
			SQUARE_OPEN,
			StringNode_new(nREGISTER, pos, Type_new(), "rbp").toNode(),
			StringNode_new(nNUMBER, pos, Type_new("Number"), offset.toString()).toNode()
		)
	}
}
