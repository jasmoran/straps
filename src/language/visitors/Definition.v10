# Gets all local & global variables, arguments, fields and enum values
# and adds them to their respective scopes.
# These "variables" are stored as { name => offset/label }
class virtual Definition < Visitor () {
	func Option<Node> visit(ClassNode n) {
		var ix = 0

		for (field in n.fields) {
			# Store field offset in class scope
			n.block.scope.set(
				field.string,
				StringNode_new(nINDEX, field.position.clone("Definition"), field.ret_type, ix.toString())
			)

			ix += 8
		}

		return None<Node>
	}

	func Option<Node> visit(EnumNode n) {
		var ix = 0

		var type = Type_new(n.name)

		for (field in n.values.children) {
			if (field.type != nIDENTIFIER) error()

			# Store value in global scope
			scope.set(
				field.to(StringNode).string,
				StringNode_new(nNUMBER, field.position.clone("Definition"), type, ix.toString())
			)

			ix++
		}

		var values = n.name.clone(6).append("Values")
		scope.set(values, StringNode_new(nNASM, n.position.clone("Definition"), Type_new("Array#String#"), values))

		return None<Node>
	}

	func Option<Node> visit(FunctionNode n) {
		var ix = 0

		# Loop through arguments
		for (field in n.args) {
			var pos = field.position.clone("Definition")
			var arg = ArgumentNode_new(field.ret_type, pos, ix, field.string)

			# Store value in function scope
			n.block.scope.set(
				field.string,
				arg
			)

			ix++
		}

		# Store cloned FunctionNode in the global scope
		if (n.pure == NullString) error("Null pure")
		scope.set(n.pure, n.shallow_clone())

  	return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var new_list = LinkedList<Node>_new()

		for (field in n.children) {
			# TODO: Fix SEGFAULT
			#var pos = field.position.clone("Definition")
			var pos = Position_new(MetaCharacter_new('?', 0, 0), "Definition")

			field.accept(this)

			# Remove class nodes once they have been visited
			if (field.type != nCLASS) {
				new_list.append(field)
			}
		}

		n.children = new_list

		return None<BlockNode>
	}

	func Option<ListNode> visit(ListNode n) {
		if (n.type != nGLOBAL) return None<ListNode>

		for (field in n.children) {
			if (field.type != nIDENTIFIER) error()

			# TODO: Fix SEGFAULT
			#var pos = field.position.clone("Definition")
			var nullpos = Position_new(MetaCharacter_new('?', 0, 0), "Definition")
			var pos = PositionRange_new(nullpos, nullpos)

			# Store global variable in global scope
			scope.set(
				field.to(StringNode).string,
				BinaryOperationNode_new(
					field.to(StringNode).ret_type,
					pos,
					SQUARE_OPEN,
					field,
					StringNode_new(nNUMBER, pos, Type_new("Number"), "0")
				)
			)
		}

		return None<ListNode>
	}
}
