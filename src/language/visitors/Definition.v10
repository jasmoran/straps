func Definition Definition_new()(?T) {
	define V Definition
	include "src/language/visitors/init.v10"
	v = Definition_new(?U)
	v.v = v
	return v
}

# Gets all local & global variables, arguments, fields and enum values
# and adds them to their respective scopes.
# These "variables" are stored as { name => offset/label }
class Definition(?T) {
	func void visit(ClassNode n)(Number ix, StringNode field, LinkedListNode lln) {
		ix = 0

		lln = n.fields.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store field offset in class scope
			n.scope.set(
				field.string,
				StringNode_new(nINDEX, field.ret_type, ix.toString()).toNode()
			)

			ix += 8

			lln = lln.fwrd
		}
	}

	func void visit(EnumNode n)(Number ix, StringNode field, LinkedListNode lln, Scope sc) {
		ix = 0

		lln = n.values.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Store value in global scope
			sc = scope
			sc.set(
				field.string,
				StringNode_new(nNUMBER, n.name, ix.toString()).toNode()
			)

			ix++

			lln = lln.fwrd
		}
	}

	func void visit(FunctionNode n)(Number ix, StringNode field, LinkedListNode lln, Scope sc) {
		#n.name = String_new(128).append(n.name)

		# Loop through arguments
		ix = 16
		lln = n.args.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			# Append type to function name
			#n.name.append('_').append(field.ret_type.raw)

			# Store value in function scope
			n.scope.set(
				field.string,
				this.new_variable(ix, field.ret_type)
			)

			ix += 8

			lln = lln.fwrd
		}

		# Store FunctionNode in the global scope
		sc = scope
		sc.set(n.name, n.toNode())
		#n.name.println(STDERR)

		# Loop through variables
		ix = 0
		lln = n.vars.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			ix -= 8

			# Store value in function scope
			n.scope.set(
				field.string,
				this.new_variable(ix, field.ret_type)
			)

			lln = lln.fwrd
		}
	}

	func void visit(ListNode n)(StringNode field, LinkedListNode lln, Scope sc) {
		lln = n.children.first
		loop {
			if (lln == 0) { break }
			field = lln.payload

			if (n.type == nGLOBAL) {
				# Store global variable in global scope
				sc = scope
				sc.set(
					field.string,
					BinaryOperationNode_new(
						SQUARE_OPEN,
						field.toNode(),
						StringNode_new(nNUMBER, Type_new("Number"), "0").toNode()
					).toNode()
				)
			} else {
				field.m_visit(this)

				# Remove class nodes once thay have been visited
				if (field.type == nCLASS) n.children.remove(lln)
			}

			lln = lln.fwrd
		}
	}




	func Node new_variable(Number offset, Type ret_type)() {
		return BinaryOperationNode_new(
			SQUARE_OPEN,
			StringNode_new(nREGISTER, Type_new(), "rbp").toNode(),
			StringNode_new(nNUMBER, Type_new("Number"), offset.toString()).toNode(),
			ret_type
		)
	}




	func void visit(StringNode n)() {}

	func void visit(Node n)() {
	}

	func void visit(BinaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(UnaryOperationNode n)() {
		n.visit_children(this.v)
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
	}

}
