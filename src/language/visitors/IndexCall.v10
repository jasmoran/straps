func IndexCall IndexCall_new()(?T, LinkedList pl, LinkedListNode plln) {
	define V "IndexCall"
	include "src/language/visitors/init.v10"
	pl = 0
	plln = 0
	v = IndexCall_new(?U, pl, plln, StringNode_new(nREGISTER, Type_new(), "r12").toNode())
	v.v = v
	return v
}

class IndexCall(?T, LinkedList parent_list, LinkedListNode parent_lln, Node scratch_reg) {
	func void prepend(Node child)(Any a) {
		if (this.parent_list == 0) error("Attempted to prepend when not enclosed by a block")
		a = child
		this.parent_list.insert_before(this.parent_lln, a)
	}

	func void visit(BinaryOperationNode n)(Node nn, Boolean dumb_or, BinaryOperationNode child, ListNode args, LinkedListNode arg) {
		if (n.op == PAREN_OPEN) {
			# Loop through arguments from last to first
			args = n.rhs
			arg = args.children.last
			loop {
				if (arg == 0) break

				# Visit argument
				nn = arg.payload
				nn = nn.m_visit(this)
				if (nn != 0) arg.payload = nn

				# Push each argment onto block
				nn = arg.payload
				this.prepend(
					UnaryOperationNode_new(PUSH, nn, true).toNode()
				)
				arg = arg.back
			}

			# Visit left hand side
			nn = n.lhs
			nn = nn.m_visit(this)
			if (nn != 0) n.lhs = nn

			# Actually call function after pushing arguments
			this.prepend(n.toNode())

			# Replace with rax
			return StringNode_new(nREGISTER, Type_new(), "rax")
		}

		# Visit left hand side
		nn = n.lhs
		nn = nn.m_visit(this)
		if (nn != 0) n.lhs = nn

		dumb_or = false
		if (n.op == DOT) dumb_or = true
		if (n.op == SQUARE_OPEN) dumb_or = true

		if (dumb_or == true) {
			# Check if lhs is also DOT/SQUARE_OPEN
			if (n.lhs.type == nBINARYOP) {
				child = n.lhs

				dumb_or = false
				if (child.op == DOT) dumb_or = true
				if (child.op == SQUARE_OPEN) dumb_or = true
				if (dumb_or == true) {
					# Move lhs to parent block
					this.prepend(
						BinaryOperationNode_new(
							ASSIGN,
							this.scratch_reg,
							n.lhs
						).toNode()
					)
					n.lhs = this.scratch_reg
				}
			}
		} else {
			# Visit right hand side
			this.scratch_reg = StringNode_new(nREGISTER, Type_new(), "r13")
			nn = n.rhs
			nn = nn.m_visit(this)
			if (nn != 0) n.rhs = nn

			child = n.rhs

			dumb_or = false
			if (child.op == DOT) dumb_or = true
			if (child.op == SQUARE_OPEN) dumb_or = true
			if (dumb_or == true) {
				# Move rhs to parent block
				this.prepend(
					BinaryOperationNode_new(
						ASSIGN,
						this.scratch_reg,
						n.rhs
					).toNode()
				)
				n.rhs = this.scratch_reg
			}
			this.scratch_reg = StringNode_new(nREGISTER, Type_new(), "r12")
		}

		return 0
	}

	func void visit(ListNode n)(LinkedListNode lln, LinkedList prev_list, LinkedListNode prev_lln) {
		if (n.type == nBLOCK) {
			prev_list = this.parent_list
			this.parent_list = n.children

			lln = n.children.first
			loop {
				if (lln == 0) { break }
				n = lln.payload

				prev_lln = this.parent_lln
				this.parent_lln = lln

				n = n.m_visit(this)

				this.parent_lln = prev_lln

				if (n != 0) {
					# Guard against function return rax being placed directly in a block
					if (n.type == nREGISTER) n = ListNode_new(nBLOCK)

					lln.payload = n
				}
				lln = lln.fwrd
			}

			this.parent_list = prev_list
		} else {
			n.visit_children(this.v)
		}

		return 0
	}





	func void visit(Node n)() {
  	return 0
	}

	func void visit(UnaryOperationNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(StringNode n)() {
  	return 0
	}

	func void visit(ClassNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(FunctionNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(IfNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(LoopNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(ReturnNode n)() {
		n.visit_children(this.v)
  	return 0
	}

	func void visit(EnumNode n)() {
		n.visit_children(this.v)
		return 0
	}
}
