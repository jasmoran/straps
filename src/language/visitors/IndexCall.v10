func IndexCall IndexCall_new() {
	var pos = Position_new(MetaCharacter_new('?', 0, 0), "IndexCall_scratchreg")
	return IndexCall_new(
		None<LinkedList<Node>>,
		None<LinkedListNode<Node>>,
		StringNode_new(nREGISTER, pos, Type_new(), "r12"),
		pos
	)
}

class virtual IndexCall < Visitor (
	Option<LinkedList<Node>> parent_list,
	Option<LinkedListNode<Node>> parent_lln,
	Node scratch_reg,
	Position pos
) {

	func void prepend(Node child) {
		this.parent_list.expect("Attempted to prepend when not enclosed by a block")
		                .insert_before(this.parent_lln, child)
	}

	func Option<Node> visit(CallNode n) {
		# Loop through arguments from last to first
		for (arg in n.args.iter().reverse()) {
			# Visit argument
			var arg_acc = arg.accept(this)
			if (arg_acc.is_some() == true) {
				var arg = arg_acc.unwrap().to(RetNode)
				arg_iter.set(arg)
			}

			# Push each argument onto block
			this.prepend(
				UnaryOperationNode_new(this.pos, PUSH, arg, true)
			)
		}

		# Visit function
		n.cfunction = n.cfunction.accept(this).unwrap_or(n.cfunction)

		# Actually call function after pushing arguments
		this.prepend(n)

		# Replace with rax
		var reg = StringNode_new(nREGISTER, this.pos, Type_new(), "rax").to(Node)
		return Some(reg)
	}

	func Option<Node> visit(BinaryOperationNode n)(ListNode args) {
		# Visit left hand side
		n.lhs = n.lhs.accept(this).unwrap_or(n.lhs)

		if (n.op == ASTERISK || n.op == FWD_SLASH || n.op == PLUS || n.op == MINUS) {
			# Visit rhs
			var rhs_acc = n.rhs.accept(this)
			if (rhs_acc.is_some() == true) {
				# Free up rax by moving value to scratch reg
				this.prepend(
					BinaryOperationNode_new(
						n.position.clone("IndexCall"),
						ASSIGN,
						this.scratch_reg,
						rhs_acc.unwrap()
					)
				)

				n.rhs = this.scratch_reg
			}

			var Node rx = StringNode_new(nREGISTER, this.pos, Type_new(), "rax")
			# Move lhs to parent block
			this.prepend(
				BinaryOperationNode_new(
					n.position.clone("IndexCall"),
					ASSIGN,
					rx,
					n.lhs
				)
			)
			n.lhs = rx


			if (n.op == ASTERISK || n.op == FWD_SLASH) {
				# Move rhs to parent block
				this.prepend(
					BinaryOperationNode_new(
						n.position.clone("IndexCall"),
						ASSIGN,
						this.scratch_reg,
						n.rhs
					)
				)

				# Prepend unary op
				this.prepend(
					UnaryOperationNode_new(
						n.position.clone("IndexCall"),
						n.op,
						this.scratch_reg,
						true
					)
				)
			} else {
				if (n.op == PLUS)  n.op = ADD
				if (n.op == MINUS) n.op = SUB

				# Prepend op
				this.prepend(n)
			}

			return Some(rx)
		}

		if (n.op == DOT || n.op == SQUARE_OPEN) {
			# Check if lhs is also DOT/SQUARE_OPEN
			if (n.lhs.type == nBINARYOP) {
				var child = n.lhs.to(BinaryOperationNode)

				if (child.op == DOT || child.op == SQUARE_OPEN) {
					# Move lhs to parent block
					this.prepend(
						BinaryOperationNode_new(
							n.position.clone("IndexCall"),
							ASSIGN,
							this.scratch_reg,
							n.lhs
						)
					)
					n.lhs = this.scratch_reg
				}
			}
		} else {
			# Visit right hand side
			this.scratch_reg = StringNode_new(nREGISTER, this.pos, Type_new(), "r13")
			n.rhs = n.rhs.accept(this).unwrap_or(n.rhs)

			if (n.rhs.type == nBINARYOP) {
				var child = n.rhs.to(BinaryOperationNode)

				if (child.op == DOT || child.op == SQUARE_OPEN) {
					# Move rhs to parent block
					this.prepend(
						BinaryOperationNode_new(
							n.position.clone("IndexCall"),
							ASSIGN,
							this.scratch_reg,
							n.rhs
						)
					)
					n.rhs = this.scratch_reg
				}
			}

			this.scratch_reg = StringNode_new(nREGISTER, this.pos, Type_new(), "r12")
		}

		return None<Node>
	}

	func Option<BlockNode> visit(BlockNode n) {
		var prev_list = this.parent_list
		this.parent_list = Some(n.children)

		for (nn in n.children) {
			var prev_lln = this.parent_lln
			this.parent_lln = nn_iter.curr

			var new_nn = nn.accept(this).unwrap_or(nn)
			nn_iter.set(new_nn)

			this.parent_lln = prev_lln

			# Guard against function return rax being placed directly in a block
			if (new_nn.type == nREGISTER) n.children.remove(nn_iter.curr.unwrap())
		}

		this.parent_list = prev_list

		return None<BlockNode>
	}

	func Option<Node> visit(UnaryOperationNode n) {
		if (n.op == MINUS) {
			this.prepend(
				BinaryOperationNode_new(
					n.position.clone("IndexCall"),
					ASSIGN,
					this.scratch_reg,
					n.expr
				)
			)

			n.expr = this.scratch_reg

			this.prepend(n)

			return Some(this.scratch_reg)
		}

		n.accept_children(this)
		return None<Node>
	}
}
