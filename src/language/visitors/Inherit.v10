class virtual Inherit < Visitor (Reporting report) {
	func void remove_duplicates(LinkedList<Node> list, StringNode field) {
		for (sn in list) {
			if (sn.type != nIDENTIFIER) error()

			# Check for matches
			if (sn.to(StringNode).string.equal(field.string) == true) {
				list.remove(sn_iter.curr.unwrap())
			}
		}
	}

	func Option<Node> visit(ClassNode n) {
		if (n.parent.is_none() == true) return None<Node>
		var parent = n.parent.unwrap()

		# Resolve parent type
		parent.resolve(scope)

		if (parent.res.is_some() == true) {
			if (parent.res.unwrap().vtable.is_some() == true)
			if (n.vtable.is_none() == true) {
				this.report.printNonVirtualChild(n)
			}

			for (node in parent.res.unwrap().fields.children.iter().reverse()) {
				if (node.type != nIDENTIFIER) error()
				var sn = node.to(StringNode)

				# Don't inherit vtable
				if (sn.string.equal("vt") == false) {
					this.remove_duplicates(n.fields.children, sn)
					n.fields.children.prepend(sn)
				}
			}
		}

		return None<Node>
	}
}
