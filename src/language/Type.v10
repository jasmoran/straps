enum TypeStrength {
	INFER NORMAL CAST
}

class TypeStrength() {}

func Type Type_new(String raw, TypeStrength strength) {
	return Type_new(raw, None<ClassNode>, strength)
}

func Type Type_new(String raw) {
	return Type_new(raw,  None<ClassNode>, NORMAL)
}

func Type Type_new() {
	return Type_new(NORMAL)
}

func Type Type_new(TypeStrength strength) {
	return Type_new("void", None<ClassNode>, strength)
}

define t "Type"
include "src/stdlib/Option.generic"

class Type (String raw, Option<ClassNode> res, TypeStrength strength) {
	func String toString()(String s) {
    if (this.strength == INFER) {
			return "ToBeInferred"
		} else if (this.res.is_some() == true) {
			return this.res.unwrap().name.clone(2).prepend('<').append('>')
		}
		return this.raw.clone(2).prepend('#').append('#')
	}

	func void resolve(Scope sc) {
		if (this.res.is_some() == true) return Void
		var res = sc.search(this.raw)
		if (res.is_some() == true) {
			if (res.unwrap().type != nCLASS) error(this.raw, " is not a class")
			var cn = res.unwrap().to(ClassNode)
			this.res = Some(cn)
		}
	}

	func Option<Scope> getScope() {
		if (this.res.is_none() == true) return None<Scope>
		return Some(this.res.unwrap().block.scope)
	}

	func void print(Stream s)() {
		this.toString().print(s)
	}

	func String basicString() {
	if (this.strength == INFER) {
		return "ToBeInferred"
	} else if (this.res.is_some() == true) {
		return this.res.unwrap().name
	}
	return this.raw
}

	# Check if this type has poss_child as a child (or equal)
	# and therefore if poss_child vars can be assigned to this type
	func Boolean has_child(Type poss_child) {
		if (this.child_rank(poss_child) > 0) return true
		return false
	}

	func Number child_rank(Type poss_child) {
		this.resolve(scope)
		if (this.res.is_none() == true) error("Can't find rank of unresolved Type ", this.basicString())

		# Check if poss_child is the same type or a child of this type
		var rank = 0
		loop {
			poss_child.resolve(scope)
			if (poss_child.res.is_none() == true) return 0

			# Return the distance between the types if we find a match
			rank++
			if (poss_child.res == this.res) return rank

			# Move up one level of the inheritance list
			var candidate = poss_child.res.unwrap().parent

			# Return 0 if we have reached the end of
			# the inheritance list without a match
			if (candidate.is_none() == true) return 0

			poss_child = candidate.unwrap()
		}

		return rank
	}

	func Boolean isResolved() {
		if (this.res.is_some() == true) return true
		return false
	}
}
