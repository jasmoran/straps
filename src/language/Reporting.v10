class Reporting(Boolean enabled, Stream st) {
	func void printPos(Position pos, Number offset) {
		var mc = pos.start
		"{\"line\":".print(this.st)
		mc.get_line().toString().print(this.st)
		",\"character\":".print(this.st)
		var endChar = mc.get_column()
		endChar += offset
		endChar.toString().print(this.st)
		"}".print(this.st)
	}

	func void printRange(Position start, Position end, Number offset) {
		"- {\"file\":\"".print(this.st)
		start.stream.print(this.st)
		"\",\"start\":".print(this.st)
		this.printPos(start, 0)
		",\"end\":".print(this.st)
		this.printPos(end, offset)
	}

	func void printVar(String name, StringNode sn) {
		"{\"name\":\"".print(this.st)
		name.print(this.st)
		"\",\"type\":\"".print(this.st)
		sn.ret_type.basicString().print(this.st)
		"\"},".print(this.st)
	}

	func void printFunc(String name, FunctionNode fn) {
		"{\"name\":\"".print(this.st)
		name.print(this.st)
		"\",\"type\":\"".print(this.st)
		fn.ret_type.basicString().print(this.st)
		"\",\"args\":[".print(this.st)

		for (narg in fn.args) {
			if (narg.type != nIDENTIFIER) error("Non identifier in function arguments")
			var arg = narg.to(StringNode)
			# Skip 'this' arg
			if (arg.string.equal("this") == true) next
			this.printVar(arg.string, arg)
		}

		"]}".print(this.st)
	}

	func void printFuncs(String name, ListNode fns) {
		for (fn in fns.children) {
			if (fn.type != nFUNCTION && fn.type != nVTAB_ACCESS)
				error("List item is not a FunctionNode")
			this.printFunc(name, fn.to(FunctionNode))
			",".print(this.st)
		}
	}

	func void printScopeOptions(Map<String_Node> sc) {
		"\"options\":[".print(this.st)
		for (pair in sc) {
			var value = pair.value.to(ListNode)
			if (value.type == nLIST) {
				this.printFuncs(pair.key, value)
			} else {
				this.printVar(pair.key, value.to(StringNode))
			}
		}
		"]".print(this.st)
	}

	func void printNotMatch(RetNode lhs, RetNode rhs) {
		this.printRange(lhs.position, rhs.position, 0)
		",\"level\":\"error\",\"message\":\"".print(this.st)
		rhs.ret_type.print(this.st)
		" does not match ".print(this.st)
		lhs.ret_type.print(this.st)
		"\"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printUnreturnable(ReturnNode n, Type fret_type) {
		var rn = n.expr.to(RetNode)
		this.printRange(n.position, rn.position, 0)
		",\"level\":\"error\",\"message\":\"".print(this.st)
		rn.ret_type.print(this.st)
		" does not match return type ".print(this.st)
		fret_type.print(this.st)
		" of function\"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printUndefinedFunction(StringNode name, LinkedList<RetNode> args, Scope sc) {
		var res = sc.search(name.string)

		this.printRange(name.position, name.position, name.string.length)
		",\"level\":\"error\",\"message\":\"".print(this.st)

		if (res.is_none() == true) {
			"Could not resolve function ".print(this.st)
			name.string.print(this.st)
			"\",".print(this.st)
			this.printScopeOptions(sc.scope)

		} else if (res.unwrap().type == nLIST) {
			"Given arguments don't match a defined function. Got ".print(this.st)
			for (arg in args) {
				arg.ret_type.basicString().print(this.st)
				" ".print(this.st)
			}
			"\",\"options\":[".print(this.st)
			var options = res.unwrap().to(ListNode)
			this.printFuncs(name.string, options)
			"]".print(this.st)

		} else {
			name.string.print(this.st)
			" is not a function\",".print(this.st)
			this.printScopeOptions(sc.scope)
		}

		"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printUndefinedIdentifier(StringNode name, Scope sc) {
		var res = sc.search(name.string)

		this.printRange(name.position, name.position, name.string.length)
		",\"level\":\"error\",\"message\":\"".print(this.st)

		if (res.is_none() == true) {
			"Could not resolve identifier ".print(this.st)
			name.string.print(this.st)
			"\",".print(this.st)
			this.printScopeOptions(sc.scope)

		} else {
			name.string.print(this.st)
			" is a function".print(this.st)
			"\".\"options\":[".print(this.st)
			var options = res.unwrap().to(ListNode)
			this.printFuncs(name.string, options)
			"]".print(this.st)
		}

		"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printRedefinedVar(StringNode vrbl) {
		this.printRange(vrbl.position, vrbl.position, vrbl.string.length)
		",\"level\":\"error\",\"message\":\"Redefined variable\"}".println(this.st)

		if (this.enabled == false) error()
	}

	func void printInvalidType(Position start, Position end, Type type) {
		this.printRange(start, end, 0)
		",\"level\":\"error\",\"message\":\"Attempted to fetch scope but type is ".print(this.st)
		type.print(this.st)
		"\"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printNonVirtualChild(ClassNode cn) {
		this.printRange(cn.position, cn.position, cn.name.length)
		",\"level\":\"error\",\"message\":\"Children of ".print(this.st)
		cn.parent.unwrap().print(this.st)
		" must be virtual\"}".println(this.st)
		if (this.enabled == false) error()
	}

	func void printNoReturn(FunctionNode fn) {
		this.printRange(fn.position, fn.position, 4)
		",\"level\":\"error\",\"message\":\"Non-void function has no return value\"}".println(this.st)
		if (this.enabled == false) error()
	}
}