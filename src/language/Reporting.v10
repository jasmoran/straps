func void printPos(Position pos) {
	var mc = pos.start
	"    file: ".print()
	pos.stream.println()
	"    line: ".print()
	mc.get_line().toString().println()
	"    char: ".print()
	mc.get_column().toString().println()
}

func void printPos(Position start, Position end) {
	"- start:".println(STDOUT)
	printPos(start)
	"  end: ".println(STDOUT)
	printPos(end)
}

func void printVar(String name, StringNode sn) {
	"{\"name\":\"".print()
	name.print()
	"\",\"type\":\"".print()
	sn.ret_type.basicString().print()
	"\"},".print()
}

func void printFunc(String name, FunctionNode fn) {
	"{\"name\":\"".print()
	name.print()
	"\",\"type\":\"".print()
	fn.ret_type.basicString().print()
	"\",\"args\":[".print()

	for (narg in fn.args.children) {
		var StringNode arg = narg
		# Skip 'this' arg
		if (arg.string.equal("this") == true) next
		printVar(arg.string, arg)
	}

	"]}".print()
}

func void printFuncs(String name, ListNode fns) {
	for (nfn in fns.children) {
		var FunctionNode fn = nfn
		printFunc(name, fn)
		",".print()
	}
}

func void printStringLocation(StringNode name) {
	"- start:".println()
	printPos(name.position)

	"  end:\n    file: ".print()
	name.position.stream.println()
	"    line: ".print()
	name.position.start.get_line().toString().println()
	var endChar = name.position.start.get_column()
	endChar += name.string.length
	"    char: ".print()
	endChar.toString().println()
}

func void printScopeOptions(Map<String_Node> sc) {
	"  options: [".print()
	for (pair in sc) {
		var ListNode value = pair.value
		if (value.type == nBLOCK) {
			printFuncs(pair.key, value)
		} else {
			printVar(pair.key, value.to(StringNode))
		}
	}
	"]".println()
}

func void printUndefinedFunction(StringNode name, LinkedList<StringNode> args, Scope sc) {
	var ListNode options = sc.search(name.string)
	printStringLocation(name)

	"  level: error".println()

	"  message: ".print()
	if (options > 0 && options.type == nBLOCK) {
		"Given arguments don't match a defined function. Got ".print()
		for (arg in args) {
			arg.ret_type.basicString().print()
			" ".print()
		}
		"\n".print()

		"  options: [".print()
		printFuncs(name.string, options)
		"]".println()
	} else {
		if (options == 0) {
			"Could not resolve ".print()
			name.string.println()
		} else {
			# options.type != nBLOCK
			name.string.print()
			" is not a function".println()
		}

		printScopeOptions(sc.scope)
	}
}

func void printUndefinedIdentifier(StringNode name, Scope sc) {
	var ListNode res = sc.search(name.string)
	printStringLocation(name)

	"  level: error".println()

	"  message: ".print()
	if (res <= 0) {
		"Could not resolve ".print()
		name.string.println()
		printScopeOptions(sc.scope)
	} else {
		name.string.print()
		" is a function".println()
		"  options: [".print()
		printFuncs(name.string, res)
		"]".println()
	}
}