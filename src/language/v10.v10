include "src/stdlib/stdlib.v10"
include "src/language/parser/Parser.v10"
include "src/language/Scope.v10"
include "src/language/Type.v10"
include "src/language/Position.v10"
include "src/language/Reporting.v10"

include "src/language/visitors/Visitor.v10"
include "src/language/visitors/Printer.v10"
include "src/language/visitors/Constructor.v10"
include "src/language/visitors/Typing.v10"
include "src/language/visitors/Method.v10"
include "src/language/visitors/Definition.v10"
include "src/language/visitors/Resolving.v10"
include "src/language/visitors/IndexCall.v10"
include "src/language/visitors/Functions.v10"
include "src/language/visitors/Strings.v10"
include "src/language/visitors/Dump.v10"
include "src/language/visitors/Variables.v10"
include "src/language/visitors/Inherit.v10"
include "src/language/visitors/ForLoop.v10"
include "src/language/visitors/TypeCheck.v10"
include "src/language/visitors/Casting.v10"
include "src/language/visitors/PlusMinus.v10"
include "src/language/visitors/Statics.v10"
include "src/language/visitors/StaticNew.v10"
include "src/language/visitors/Completions.v10" 

global(Scope scope)

func void main(CharArr comp, CharArr in_path, CharArr out_path, CharArr caflags)(Stream input, Stream output, Parser parser, Node root, Visitor v, Scope sc) {
	# Open input file
	# input = File_open(in_path)
	# if (input < 0) { return 1 }

	# Read flags
	var keep = false
	if (caflags != 0) {
		var flags = String_fromTerminated(caflags)
		if (flags.length > 1 && flags.get(1) == 'k') keep = true
	}

	parser = Parser_new(String_fromTerminated(in_path), STDIN)
	root = parser.parse()
	sc = Scope_new()
	scope = sc

	var pos = Position_new(MetaCharacter_new('?', 0, 0), "GLOBALS_SETUP")
	sc.set("rax", StringNode_new(nREGISTER, pos, Type_new(), "rax").toNode())
	sc.set("rbx", StringNode_new(nREGISTER, pos, Type_new(), "rbx").toNode())
	sc.set("rcx", StringNode_new(nREGISTER, pos, Type_new(), "rcx").toNode())
	sc.set("rdx", StringNode_new(nREGISTER, pos, Type_new(), "rdx").toNode())
	sc.set("rsp", StringNode_new(nREGISTER, pos, Type_new(), "rsp").toNode())
	sc.set("rbp", StringNode_new(nREGISTER, pos, Type_new(), "rbp").toNode())
	sc.set("rsi", StringNode_new(nREGISTER, pos, Type_new(), "rsi").toNode())
	sc.set("rdi", StringNode_new(nREGISTER, pos, Type_new(), "rdi").toNode())
	sc.set("r12", StringNode_new(nREGISTER, pos, Type_new(), "r12").toNode())
	sc.set("r13", StringNode_new(nREGISTER, pos, Type_new(), "r13").toNode())

	load_loop()

	v = PlusMinus_new()
	root.accept(v)
	v = Statics_new()
	root.accept(v)
	v = StaticNew_new()
	root.accept(v)
	v = Casting_new()
	root.accept(v)
	v = ForLoop_new()
	root.accept(v)
	v = Variables_new()
	root.accept(v)
	v = Typing_new()
	root.accept(v)
	v = Inherit_new()
	root.accept(v)
	v = Constructor_new()
	root.accept(v)
	v = Method_new()
	root.accept(v)
	v = Definition_new()
	root.accept(v)
	"issues:".println()
	v = Resolving_new()
	root.accept(v)
	# v = Printer_new()
	# root.accept(v)
	v = TypeCheck_new()
	root.accept(v)
	v = IndexCall_new()
	root.accept(v)
	v = Functions_new()
	root.accept(v)
	v = Strings_new()
	root.accept(v)
	"functions:".println()
	v = Completions_new()
	root.accept(v)

	return 0

	# Open output file
	output = File_create("out.asm")
	if (output < 0) { return 1 }

	v = Dump_new(output)
	root.accept(v)

	# nasm -f elf64 out.asm
	Run_new(4).add("/usr/bin/nasm").add("-f").add("elf64").add("out.asm").exec()

	# ld -m elf_x86_64 -o out_path out.o
	Run_new(6).add("/usr/bin/ld").add("-m").add("elf_x86_64")
						.add("-o").add(String_fromTerminated(out_path)).add("out.o").exec()

	# Clean up
	if (keep == false) {
		File_delete("out.asm")
		File_delete("out.o")
	}
}
