include "src/stdlib/stdlib.v10"
include "src/language/parser/Parser.v10"
include "src/language/Scope.v10"
include "src/language/Type.v10"

include "src/language/visitors/Visitor.v10"
include "src/language/visitors/Printer.v10"
include "src/language/visitors/Constructor.v10"
include "src/language/visitors/Typing.v10"
include "src/language/visitors/Method.v10"
include "src/language/visitors/Definition.v10"
include "src/language/visitors/Resolving.v10"
include "src/language/visitors/IndexCall.v10"
include "src/language/visitors/Dump.v10"
include "src/language/visitors/Strings.v10"

global(Scope scope)

func void main(CharArr comp, CharArr in_path, CharArr out_path)(Stream input, Stream output, Parser parser, Node root, Visitor v, Scope sc) {
	# Open input file
	input = File_open(in_path)
	if (input < 0) { return 1 }

	# Open output file
	output = File_create(out_path)
	if (output < 0) { return 1 }

	parser = Parser_new(String_fromTerminated(in_path), input)
	root = parser.parse()
	sc = Scope_new()
	scope = sc

	sc.set("rax", StringNode_new(nREGISTER, Type_new(), "rax").toNode())
	sc.set("rbx", StringNode_new(nREGISTER, Type_new(), "rbx").toNode())
	sc.set("rcx", StringNode_new(nREGISTER, Type_new(), "rcx").toNode())
	sc.set("rdx", StringNode_new(nREGISTER, Type_new(), "rdx").toNode())
	sc.set("rsp", StringNode_new(nREGISTER, Type_new(), "rsp").toNode())
	sc.set("rbp", StringNode_new(nREGISTER, Type_new(), "rbp").toNode())
	sc.set("rsi", StringNode_new(nREGISTER, Type_new(), "rsi").toNode())
	sc.set("rdi", StringNode_new(nREGISTER, Type_new(), "rdi").toNode())
	sc.set("r12", StringNode_new(nREGISTER, Type_new(), "r12").toNode())
	sc.set("r13", StringNode_new(nREGISTER, Type_new(), "r13").toNode())

	load_loop()

	v = Constructor_new()
	root.m_visit(v)
	v = Typing_new()
	root.m_visit(v)
	v = Method_new()
	root.m_visit(v)
	v = Definition_new()
	root.m_visit(v)
	v = Resolving_new()
	root.m_visit(v)
	v = IndexCall_new()
	root.m_visit(v)
	v = Strings_new()
	root.m_visit(v)
	v = Dump_new(output)
	root.m_visit(v)
}
