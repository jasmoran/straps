include "src/stdlib/stdlib.v10"
include "src/language/parser/Parser.v10"
include "src/language/Scope.v10"
include "src/language/Type.v10"
include "src/language/Position.v10"
include "src/language/Reporting.v10"

include "src/language/visitors/Visitor.v10"
include "src/language/visitors/Printer.v10"
include "src/language/visitors/Constructor.v10"
include "src/language/visitors/Typing.v10"
include "src/language/visitors/Method.v10"
include "src/language/visitors/Definition.v10"
include "src/language/visitors/Resolving.v10"
include "src/language/visitors/IndexCall.v10"
include "src/language/visitors/Functions.v10"
include "src/language/visitors/Strings.v10"
include "src/language/visitors/Dump.v10"
include "src/language/visitors/Variables.v10"
include "src/language/visitors/Inherit.v10"
include "src/language/visitors/ForLoop.v10"
include "src/language/visitors/TypeCheck.v10"
include "src/language/visitors/Casting.v10"
include "src/language/visitors/PlusMinus.v10"
include "src/language/visitors/Statics.v10"
include "src/language/visitors/StaticNew.v10"
include "src/language/visitors/Externals.v10"

global(Scope scope)

# Normalises file names
# e.g. "LinkedList.v10" => "LinkedList"
#      "LinkedList"     => "LinkedList"
func String norm_name(String name) {
	var Number dot_pos = name.length - 4
	if (name.get(dot_pos) == '.') {
		name.length -= 4
	}
	return name
}


func void headerize(Set<String> glob_reqs, Set<String> reqs, ListNode lfuncs, LinkedList<String> externals) {
	for (req in reqs) {
		# Skip requirement if it has already been dealt with globally
		if (glob_reqs.contains(req) == true) {
			next
		}

		# Add this requirement to the glob_reqs
		glob_reqs.add(req)

		var src_path = req.clone(4).append(".v10")
		var parser = Parser_new(req, File_open(src_path))
		var reqroot = parser.parse()

		# Add stdlib if not required already
		# if (req.equal("src/stdlib/stdlib") == false) parser.reqs.add("src/stdlib/stdlib")

		# Process this file's requirements
		headerize(glob_reqs, parser.reqs, lfuncs, externals)

		# Visit this file
		reqroot.accept(Externals_new(externals))
		reqroot.accept(Typing_new())
		reqroot.accept(Inherit_new())
		reqroot.accept(Constructor_new())
		reqroot.accept(Method_new())
		reqroot.accept(Definition_new())
		var fncvis = Functions_new()
		fncvis.lfuncs = lfuncs
		reqroot.accept(fncvis)
	}
}

func void main(CharArr comp, CharArr src_path, CharArr out_path, CharArr caflags) {
	load_loop()

	# Read flags
	var keep = false
	var report = false
	if (caflags != 0) {
		var flags = String_fromTerminated(caflags)
		if (flags.length > 1 && flags.get(1) == 'k') keep = true
		if (flags.length > 2 && flags.get(2) == 'r') report = true
	}

	var reporting = Reporting_new(report, STDOUT)

	var name = norm_name(String_fromTerminated(src_path))
	var glob_reqs = build(name, reporting)

	if (report == true) return 0

	# # Set up linker runner
	# var Number num_args = glob_reqs.length + 5
	# var linker = Run_new(num_args)
	# linker.add("/usr/bin/ld").add("-m").add("elf_x86_64").add("-o").add(String_fromTerminated(out_path))

	# for (req in glob_reqs) {
	# 	if (req == glob_reqs.first.payload) next
	# 	build(req, reporting)

	# 	# Add object to linker args
	# 	linker.add(req.clone(2).append(".o"))
	# }

	# # ld -m elf_x86_64 -o out_path out.o
	# linker.add(name.clone(2).append(".o")).exec()

	# # Clean up
	# if (keep == false) {
	# 	File_delete("out.asm")
	# 	# File_delete("out.o")
	# }

	return 0
}

func Set<String> build(String name, Reporting reporting) {
	# Open input file
	var src_path = name.clone(4).append(".v10")
	var input = File_open(src_path)
	if (input < 0) { return 0 }

	var sc = Scope_new()
	scope = sc
	var parser = Parser_new(src_path, input)
	var root = parser.parse()

	# Open output file
	var asm_path = name.clone(4).append(".asm")
	var output = File_create(asm_path)
	if (output < 0) { return 0 }

	# if (name.equal("src/stdlib/stdlib") == false) parser.reqs.add("src/stdlib/stdlib")

	var pos = Position_new(MetaCharacter_new('?', 0, 0), "MainFunctions")
	var lfuncs = ListNode_new(nFUNCTIONS, pos)
	var glob_reqs = Set<String>_new()
	glob_reqs.add(name)

	var externals = LinkedList<String>_new()
	"section .text".println(output)
	headerize(glob_reqs, parser.reqs, lfuncs, externals)
	for (fnc in lfuncs.children) {
		"extern ".print(output)
		fnc.to(StringNode).string.println(output)
		fnc_iter.fetch()
	}
	for (extern in externals) {
		"extern ".print(output)
		extern.println(output)
	}

	var pos = Position_new(MetaCharacter_new('?', 0, 0), "GLOBALS_SETUP")
	sc.set("rax", StringNode_new(nREGISTER, pos, Type_new(), "rax").toNode())
	sc.set("rbx", StringNode_new(nREGISTER, pos, Type_new(), "rbx").toNode())
	sc.set("rcx", StringNode_new(nREGISTER, pos, Type_new(), "rcx").toNode())
	sc.set("rdx", StringNode_new(nREGISTER, pos, Type_new(), "rdx").toNode())
	sc.set("rsp", StringNode_new(nREGISTER, pos, Type_new(), "rsp").toNode())
	sc.set("rbp", StringNode_new(nREGISTER, pos, Type_new(), "rbp").toNode())
	sc.set("rsi", StringNode_new(nREGISTER, pos, Type_new(), "rsi").toNode())
	sc.set("rdi", StringNode_new(nREGISTER, pos, Type_new(), "rdi").toNode())
	sc.set("r12", StringNode_new(nREGISTER, pos, Type_new(), "r12").toNode())
	sc.set("r13", StringNode_new(nREGISTER, pos, Type_new(), "r13").toNode())

	var Visitor v = PlusMinus_new()
	root.accept(v)
	v = Statics_new()
	root.accept(v)
	v = Casting_new()
	root.accept(v)
	v = ForLoop_new()
	root.accept(v)
	v = Variables_new()
	root.accept(v)
	v = Typing_new()
	root.accept(v)
	v = Inherit_new()
	root.accept(v)
	v = StaticNew_new()
	root.accept(v)
	v = Constructor_new()
	root.accept(v)
	v = Method_new()
	root.accept(v)
	v = Definition_new()
	root.accept(v)
	v = Resolving_new(reporting)
	root.accept(v)
	v = TypeCheck_new(reporting)
	root.accept(v)

	if (reporting.enabled == true) return 0

	v = IndexCall_new()
	root.accept(v)
	var fncvis = Functions_new()
	fncvis.lfuncs = lfuncs
	root.accept(fncvis)
	v = Strings_new()
	root.accept(v)

	v = Dump_new(output)
	root.accept(v)

	# # nasm -f elf64 out.asm
	# var obj_path = name.clone(2).append(".o")
	# Run_new(6).add("/usr/bin/nasm").add("-f").add("elf64").add(asm_path).add("-o").add(obj_path).exec()

	return glob_reqs
}
