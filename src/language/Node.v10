enum NodeType {
	nNONE nNASM nSYS nBLOCK nPAREN_LIST nFUNCTION nRETURN nCOMPARISON nIF
	nNEXT nLOOP nBREAK nIDENTIFIER nENUM nCOMMENT nCHARACTER nSTRING nNUMBER
	nINDEX nCALL nOPERATION nMEM_ACCESS nREGISTER nPUSH nPOP nCLASS nFIELD nGLOBAL
	nSTRINGS nBINARYOP nUNARYOP nLIST
}

class NodeType() {
	func String toString()(Array a, Number ix) {
		nasm("mov rax, NodeType")
		a = rax
		ix = this
		return a.get(ix)
	}
}

func Node Node_new(NodeType type)(void m_visit) {
	define N Node
	include "src/language/nodes/init.v10"
	return Node_new(type, m_visit)
}

class Node(NodeType type, void m_visit){
	func void visit(Visitor v)() {
		v.m_visit_Node(this)
	}

	func void visit_children(Visitor v)() {}
}



func BinaryOperationNode BinaryOperationNode_new(Token op, Node lhs, Node rhs)(void m_visit) {
	define N BinaryOperationNode
	include "src/language/nodes/init.v10"
	return BinaryOperationNode_new(nBINARYOP, m_visit, op, lhs, rhs)
}

class BinaryOperationNode(NodeType type, void m_visit, Token op, Node lhs, Node rhs) {
	func void visit(Visitor v)() {
		v.m_visit_BinaryOperationNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.lhs
		n.m_visit(v)
		n = this.rhs
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func UnaryOperationNode UnaryOperationNode_new(Token op, Node expr, Boolean left)(void m_visit) {
	define N UnaryOperationNode
	include "src/language/nodes/init.v10"
	return UnaryOperationNode_new(nUNARYOP, m_visit, op, expr, left)
}

class UnaryOperationNode(NodeType type, void m_visit, Token op, Node expr, Boolean left) {
	func void visit(Visitor v)() {
		v.m_visit_UnaryOperationNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.expr
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func StringNode StringNode_new(NodeType type, String ret_type, String string)(void m_visit) {
	define N StringNode
	include "src/language/nodes/init.v10"
	return StringNode_new(type, m_visit, ret_type, string)
}

class StringNode(NodeType type, void m_visit, String ret_type, String string) {
	func void visit(Visitor v)() {
		v.m_visit_StringNode(this)
	}

	func void visit_children(Visitor v)() {}

	func Node toNode()() { return this }
}



func Node ClassNode_new(String name, ListNode fields, ListNode block)(void m_visit) {
	define N ClassNode
	include "src/language/nodes/init.v10"
	return ClassNode_new(nCLASS, m_visit, name, fields, block)
}

class ClassNode(NodeType type, void m_visit, String name, ListNode fields, ListNode block) {
	func void visit(Visitor v)() {
		v.m_visit_ClassNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.fields
		n.m_visit(v)
		n = this.block
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func Node FunctionNode_new(String ret_type, String name, ListNode args, ListNode vars, ListNode block)(void m_visit) {
	define N FunctionNode
	include "src/language/nodes/init.v10"
	return FunctionNode_new(nFUNCTION, m_visit, ret_type, name, args, vars, block)
}

class FunctionNode(NodeType type, void m_visit, String ret_type, String name, ListNode args, ListNode vars, ListNode block) {
	func void visit(Visitor v)() {
		v.m_visit_FunctionNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.args
		n.m_visit(v)
		n = this.vars
		n.m_visit(v)
		n = this.block
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func Node ListNode_new(NodeType type, LinkedList children)(void m_visit) {
	define N ListNode
	include "src/language/nodes/init.v10"
	return ListNode_new(type, m_visit, children)
}
func Node ListNode_new(NodeType type)() {
	return ListNode_new(type, LinkedList_new())
}

class ListNode(NodeType type, void m_visit, LinkedList children) {
	func void visit(Visitor v)() {
		v.m_visit_ListNode(this)
	}

	func void visit_children(Visitor v)(Node n, LinkedListNode lln) {
		lln = this.children.first
		loop {
			if (lln == 0) { break }
			n = lln.payload
			n.m_visit(v)
			lln = lln.fwrd
		}
	}

	func Node toNode()() { return this }

	func ListNode append(Node n)(Any a) {
		a = n
		this.children.append(a)
		return this
	}
}



func Node IfNode_new(Node condition, ListNode block_if)(ListNode l, void m_visit) {
	define N IfNode
	include "src/language/nodes/init.v10"
	l = 0
	return IfNode_new(nIF, m_visit, condition, block_if, l)
}

class IfNode(NodeType type, void m_visit, Node condition, ListNode block_if, ListNode block_else) {
	func void visit(Visitor v)() {
		v.m_visit_IfNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.condition
		n.m_visit(v)
		n = this.block_if
		n.m_visit(v)
		n = this.block_else
		if (n != 0) {
			n.m_visit(v)
		}
	}

	func Node toNode()() { return this }
}



func Node LoopNode_new(ListNode block)(void m_visit) {
	define N LoopNode
	include "src/language/nodes/init.v10"
	return LoopNode_new(nLOOP, m_visit, block)
}

class LoopNode(NodeType type, void m_visit, ListNode block) {
	func void visit(Visitor v)() {
		v.m_visit_LoopNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.block
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func Node ReturnNode_new(Node expr)(void m_visit) {
	define N ReturnNode
	include "src/language/nodes/init.v10"
	return ReturnNode_new(nRETURN, m_visit, expr)
}

class ReturnNode(NodeType type, void m_visit, Node expr) {
	func void visit(Visitor v)() {
		v.m_visit_ReturnNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.expr
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}



func Node EnumNode_new(String name, ListNode values)(void m_visit) {
	define N EnumNode
	include "src/language/nodes/init.v10"
	return EnumNode_new(nENUM, m_visit, name, values)
}

class EnumNode(NodeType type, void m_visit, String name, ListNode values) {
	func void visit(Visitor v)() {
		v.m_visit_EnumNode(this)
	}

	func void visit_children(Visitor v)(Node n) {
		n = this.values
		n.m_visit(v)
	}

	func Node toNode()() { return this }
}
