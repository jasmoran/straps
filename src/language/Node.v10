define k "String"
define v "FunctionNode"
include "src/stdlib/Map.generic"
define k "String"
define v "Node"
include "src/stdlib/Map.generic"

define t "Node"
include "src/stdlib/Array.generic"
define t "FunctionNode"
include "src/stdlib/Array.generic"

define t "Node"
include "src/stdlib/LinkedList.generic"
define t "StringNode"
include "src/stdlib/LinkedList.generic"
define t "FunctionNode"
include "src/stdlib/LinkedList.generic"

enum NodeType {
	nNONE nNASM nSYS nBLOCK nPAREN_LIST nFUNCTION nRETURN nCOMPARISON nIF
	nNEXT nLOOP nBREAK nIDENTIFIER nENUM nCOMMENT nCHARACTER nSTRING nNUMBER
	nINDEX nCALL nOPERATION nMEM_ACCESS nREGISTER nPUSH nPOP nCLASS nFIELD nGLOBAL
	nSTRINGS nBINARYOP nUNARYOP nLIST nFUNCTIONS nVTAB_ACCESS nFOR
}

class NodeType() {
	func String toString()(Array<String> a, Number ix) {
		nasm("mov rax, NodeType")
		a = rax
		ix = this
		return a.get(ix)
	}
}

class virtual Node(NodeType type, Position position) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)() {}

	func Node toNode()() { return this }

	func Node clone() {
		return Node_new(this.type, this.position)
	}
}


class virtual RetNode < Node (Type ret_type) {}
class virtual OpNode < RetNode (Token op) {}

func CallNode CallNode_new(Position pos, Node cfunction) {
	var args = LinkedList<StringNode>_new()
	return CallNode_new(pos, cfunction, args)
}

func CallNode CallNode_new(Position pos, Node cfunction, LinkedList<StringNode> args) {
	return CallNode_new(nCALL, pos, Type_new(), cfunction, args)
}

class virtual CallNode < RetNode (Node cfunction, LinkedList<StringNode> args) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_args(Visitor v) {
		for (arg in this.args) {
			var Node nn = arg
			var StringNode n = nn.accept(v)
			if (n != 0) arg_iter.set(n)
		}
	}

	func void accept_children(Visitor v) {
		var n = this.cfunction
		n = n.accept(v)
		if (n != 0) this.cfunction = n

		this.accept_args(v)
	}

	func CallNode clone() {
		return CallNode_new(this.type, this.position, this.ret_type, this.cfunction, this.args)
	}
}


func BinaryOperationNode BinaryOperationNode_new(Position pos, Token op, Node lhs, Node rhs)() {
	return BinaryOperationNode_new(Type_new(), pos, op, lhs, rhs)
}
func BinaryOperationNode BinaryOperationNode_new(Type ret_type, Position pos, Token op, Node lhs, Node rhs)() {
	return BinaryOperationNode_new(nBINARYOP, pos, ret_type, op, lhs, rhs)
}

class virtual BinaryOperationNode < OpNode (Node lhs, Node rhs) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.lhs
		n = n.accept(v)
		if (n != 0) this.lhs = n
		n = this.rhs
		n = n.accept(v)
		if (n != 0) this.rhs = n
	}

	func BinaryOperationNode clone() {
		return BinaryOperationNode_new(this.type, this.position, this.ret_type, this.op, this.lhs, this.rhs)
	}
}


func UnaryOperationNode UnaryOperationNode_new(Position pos, Token op, Node expr, Boolean left)() {
	return UnaryOperationNode_new(pos, Type_new(), op, expr, left)
}
func UnaryOperationNode UnaryOperationNode_new(Position pos, Type ret_type, Token op, Node expr, Boolean left)() {
	return UnaryOperationNode_new(nUNARYOP, pos, ret_type, op, expr, left)
}

class virtual UnaryOperationNode < OpNode (Node expr, Boolean left) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.expr
		n = n.accept(v)
		if (n != 0) this.expr = n
	}

	func UnaryOperationNode clone() {
		return UnaryOperationNode_new(this.type, this.position, this.ret_type, this.op, this.expr, this.left)
	}
}



class virtual StringNode < RetNode (String string) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)() {}

	func StringNode clone() {
		return StringNode_new(this.type, this.position, this.ret_type, this.string)
	}
}



func Node ClassNode_new(Position pos, String name, ListNode fields, ListNode block, Map<String_FunctionNode> vtable, Type parent, Scope file_scope) {
	var sc = Scope_new(name, file_scope)
	return ClassNode_new(nCLASS, pos, name, fields, block, sc, vtable, parent)
}

func Node ClassNode_new(Position pos, String name, ListNode fields, ListNode block) {
	var Map<String_FunctionNode> vtable = 0
	var parent = Type_new()
	return ClassNode_new(pos, name, fields, block, vtable, parent)
}

class virtual ClassNode < Node (String name, ListNode fields,
								ListNode block, Scope scope, Map<String_FunctionNode> vtable, Type parent) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.fields
		n = n.accept(v)
		if (n != 0) this.fields = n
		n = this.block
		n = n.accept(v)
		if (n != 0) this.block = n
	}

	func ClassNode shallow_clone() {
		return ClassNode_new(this.position, this.name, ListNode_new(nLIST, this.fields.position),
												 ListNode_new(nLIST, this.block.position), this.vtable, this.parent)
	}

	func ClassNode clone() {
		return ClassNode_new(this.type, this.position, this.name, this.fields, this.block, this.scope, this.vtable, this.parent)
	}
}



func FunctionNode FunctionNode_new(Position pos, Type ret_type, String name, ListNode args, ListNode vrbls, ListNode block) {
	var sc = Scope_new(name, file_scope)
	return FunctionNode_new(nFUNCTION, pos, ret_type, name, args, vrbls, block, sc, NullString)
}

class virtual FunctionNode < RetNode (String name, ListNode args, ListNode vrbls, ListNode block, Scope scope, String pure) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.args
		n = n.accept(v)
		if (n != 0) this.args = n
		n = this.vrbls
		n = n.accept(v)
		if (n != 0) this.vrbls = n
		n = this.block
		n = n.accept(v)
		if (n != 0) this.block = n
	}

	func FunctionNode shallow_clone()(FunctionNode fn) {
		fn = FunctionNode_new(this.position, this.ret_type, this.name, this.args, this.vrbls, ListNode_new(nBLOCK, this.block.position))
		fn.scope = this.scope
		return fn
	}

	func FunctionNode clone() {
		return FunctionNode_new(this.type, this.position, this.ret_type, this.name, this.args, this.vrbls, this.block, this.scope, this.pure)
	}
}



func ListNode ListNode_new(NodeType type, Position pos)() {
	return ListNode_new(type, pos, LinkedList<Node>_new())
}

class virtual ListNode < Node (LinkedList<Node> children) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v) {
		var lln = this.children.first
		loop {
			if (lln == 0) { break }
			var n = lln.payload
			n = n.accept(v)
			if (n != 0) lln.payload = n
			lln = lln.fwrd
		}
	}

	func ListNode append(Node n) {
		this.children.append(n)
		return this
	}

	func ListNode prepend(Node n) {
		this.children.prepend(n)
		return this
	}

	func ListNode clone() {
		return ListNode_new(this.type, this.position, this.children)
	}
}



func Node IfNode_new(Position pos, Node condition, ListNode block_if)(ListNode l) {
	l = 0
	return IfNode_new(nIF, pos, condition, block_if, l)
}

class virtual IfNode < Node (Node condition, ListNode block_if, ListNode block_else) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.condition
		n = n.accept(v)
		if (n != 0) this.condition = n
		n = this.block_if
		n = n.accept(v)
		if (n != 0) this.block_if = n
		n = this.block_else
		if (n != 0) {
			n = n.accept(v)
			if (n != 0) this.block_else = n
		}
	}

	func IfNode clone() {
		return IfNode_new(this.type, this.position, this.condition, this.block_if, this.block_else)
	}
}



func Node LoopNode_new(Position pos, ListNode block)() {
	return LoopNode_new(nLOOP, pos, block)
}

# TODO: Make this a subclass of ListNode?
class virtual LoopNode < Node (ListNode block) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.block
		n = n.accept(v)
		if (n != 0) this.block = n
	}

	func LoopNode clone() {
		return LoopNode_new(this.type, this.position, this.block)
	}
}



func Node ReturnNode_new(Position pos, Node expr)() {
	return ReturnNode_new(nRETURN, pos, expr)
}

class virtual ReturnNode < Node (Node expr) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.expr
		n = n.accept(v)
		if (n != 0) this.expr = n
	}

	func ReturnNode clone() {
		return ReturnNode_new(this.type, this.position, this.expr)
	}
}



func Node EnumNode_new(Position pos, String name, ListNode values)() {
	return EnumNode_new(nENUM, pos, name, values)
}

class virtual EnumNode < Node (String name, ListNode values) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.values
		n = n.accept(v)
		if (n != 0) this.values = n
	}

	func EnumNode clone() {
		return EnumNode_new(this.type, this.position, this.name, this.values)
	}
}



func ForNode ForNode_new(Position pos, StringNode item, Node iterable, ListNode block)() {
	return ForNode_new(nFOR, pos, item, iterable, block)
}

class virtual ForNode < Node (StringNode item, Node iterable, ListNode block) {
	func void accept(Visitor v)() {
		v.visit(this)
	}

	func void accept_children(Visitor v)(Node n) {
		n = this.item
		n = n.accept(v)
		if (n != 0) this.item = n
		n = this.iterable
		n = n.accept(v)
		if (n != 0) this.iterable = n
		n = this.block
		n = n.accept(v)
		if (n != 0) this.block = n
	}

	func ForNode clone() {
		return ForNode_new(this.type, this.position, this.item, this.iterable, this.block)
	}
}
