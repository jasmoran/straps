include "src/language/Node.v10"
include "src/language/Tokenizer.v10"
include "src/language/parser/Operator.v10"

func Parser Parser_new(String name, Stream input)() {
	return Parser_new(name, Tokenizer_new(input))
}

class Parser(String name, Tokenizer t) {
	func Node nt_class()(String name, ListNode fields, ListNode block) {
		this.t.consume(CLASS)

		name = this.t.consume(IDENTIFIER)
		fields = this.typed_list(nLIST)
		block = this.block(nBLOCK)

		return ClassNode_new(name, fields, block)
	}

	func Node nt_enum()(String name, ListNode values) {
		this.t.consume(ENUM)

		name = this.t.consume(IDENTIFIER)
		values = this.block(nBLOCK)

		return EnumNode_new(name, values)
	}

	func Node nt_function()(String ret_type, String name, ListNode args, ListNode vars, ListNode block) {
		this.t.consume(FUNC)

		ret_type = this.t.consume(IDENTIFIER)
		name = this.t.consume(IDENTIFIER)
		args = this.typed_list(nLIST)
		vars = this.typed_list(nLIST)
		block = this.block(nBLOCK)

		return FunctionNode_new(ret_type, name, args, vars, block)
	}

	func Node nt_if()(IfNode node, Node expr, ListNode block_if) {
		this.t.consume(IF)

		expr = this.expression()
		block_if = this.block(nBLOCK)
		node = IfNode_new(expr, block_if)

		if (this.t.peek() == ELSE) {
			this.t.consume(ELSE)
			node.block_else = this.block(nBLOCK)
		}

		return node
	}

	func Node nt_include()(String path, Parser parser) {
		this.t.consume(INCLUDE)
		path = this.t.consume(STRING)
		parser = Parser_new(path, File_open(path))
		return parser.parse()
	}

	func Node nt_nasm()(Node node) {
		this.t.consume(NASM)
		this.t.consume(PAREN_OPEN)
		node = StringNode_new(nNASM, "void", this.t.consume(STRING))
		this.t.consume(PAREN_CLOSE)
		return node
	}






	func Node parse()(ListNode l, Any expr) {
		l = ListNode_new(nBLOCK)

		loop {
			expr = this.expression()
			if (expr == 0) { break }
			l.children.append(expr)
		}

		return l
	}

	func ListNode block(NodeType t)(ListNode l, Any expr) {
		l = ListNode_new(t)

		if (this.t.peek() == CURLY_OPEN) {
			this.t.consume(CURLY_OPEN)

			loop {
				if (this.t.peek() == CURLY_CLOSE) { break }
				expr = this.expression()
				l.children.append(expr)
			}

			this.t.consume(CURLY_CLOSE)
		} else {
			expr = this.expression()
			l.children.append(expr)
		}

		return l
	}

	func ListNode typed_list(NodeType t)(ListNode l, Any n, String type, String var) {
		this.t.consume(PAREN_OPEN)
		l = ListNode_new(t)

		loop {
			if (this.t.peek() == PAREN_CLOSE) { break }

			type = this.t.consume(IDENTIFIER)
			var = this.t.consume(IDENTIFIER)
			n = StringNode_new(nIDENTIFIER, type, var)

			l.children.append(n)

			if (this.t.peek() != COMMA) { break }

			this.t.consume(COMMA)
		}

		this.t.consume(PAREN_CLOSE)

		return l
	}

	func LinkedList expression_list()(LinkedList l, Any expr) {
		this.t.consume(PAREN_OPEN)
		l = LinkedList_new()

		loop {
			if (this.t.peek() == PAREN_CLOSE) { break }
			expr = this.expression()
			l.append(expr)
			this.t.consume(COMMA)
		}

		this.t.consume(PAREN_CLOSE)

		return l
	}







	func Node expression()() {
		return this.process_expression(this.primary_expression(), 1)
	}

	func Node process_expression(Node lhs, Number min_prec)(Token op, Token lookahead, Node rhs, Number lap) {
		loop {
			op = this.t.peek()
			if (Operator_prec(op) < min_prec) { break }
			this.t.consume()
			rhs = this.primary_expression()

			loop {
				lookahead = this.t.peek()
				lap = Operator_prec(lookahead)

				# Right Unary operators
				if (Operator_unary_right(lookahead) == true) {
					this.t.consume(lookahead)
					rhs = UnaryOperationNode_new(lookahead, rhs, false)
					next
				}
				if (lookahead == PAREN_OPEN) {
					rhs = ListNode_new(nCALL, this.expression_list())
					rhs = UnaryOperationNode_new(PAREN_OPEN, rhs, false)
					next
				}

				if (lap <= Operator_prec(op)) {
					if (Operator_left_assoc(lookahead) == true) { break }
					if (lap != Operator_prec(op)) { break }

				}

				rhs = this.process_expression(rhs, lap)
			}

			lhs = BinaryOperationNode_new(op, lhs, rhs)
		}

		return lhs
	}

	func Node primary_expression()(Token tk, Node expr, Number n) {
		tk = this.t.peek()

		if (tk == NONE) {
			return 0
		}

		# Parenthesised expression
		if (tk == PAREN_OPEN) {
			this.t.consume(PAREN_OPEN)
			expr = this.expression()
			this.t.consume(PAREN_CLOSE)
			return expr
		}

		# Left Unary operators
		if (Operator_unary_left(tk) == true) {
			this.t.consume(tk)
			return UnaryOperationNode_new(tk, this.primary_expression(), true)
		}

		# Values

		if (tk == BREAK) {
			this.t.consume(BREAK)
			return Node_new(nBREAK)
		}

		if (tk == CHARACTER) {
			return StringNode_new(nCHARACTER, "Character", this.t.consume(CHARACTER))
		}

		if (tk == CLASS) {
			return this.nt_class()
		}

		if (tk == ENUM) {
			return this.nt_enum()
		}

		# TODO: add FOR

		if (tk == FUNC) {
			return this.nt_function()
		}

		if (tk == GLOBAL) {
			this.t.consume(GLOBAL)
			return this.typed_list(nGLOBAL)
		}

		if (tk == IDENTIFIER) {
			return StringNode_new(nIDENTIFIER, "?", this.t.consume(IDENTIFIER))
		}

		if (tk == IF) {
			return this.nt_if()
		}

		if (tk == INCLUDE) {
			return this.nt_include()
		}

		if (tk == LOOP) {
			this.t.consume(LOOP)
			return LoopNode_new(this.block(nBLOCK))
		}

		if (tk == NASM) {
			return this.nt_nasm()
		}

		if (tk == NEXT) {
			this.t.consume(NEXT)
			return Node_new(nNEXT)
		}

		if (tk == NUMBER) {
			return StringNode_new(nNUMBER, "Number", this.t.consume(NUMBER))
		}

		if (tk == RETURN) {
			this.t.consume(RETURN)
			return ReturnNode_new(this.expression())
		}

		if (tk == STRING) {
			return StringNode_new(nSTRING, "String", this.t.consume(STRING))
		}

		# TODO: add SWITCH/CASE

		if (tk == SYS) {
			this.t.consume(SYS)
			return ListNode_new(nSYS, this.expression_list())
		}

		# TODO: add WHILE

		n = tk
		"Unknown value expression! (Token: ".print(STDERR)
		n.toString(false).print(STDERR)
		")\n".print(STDERR)
		sys(60, 1)
	}
}
