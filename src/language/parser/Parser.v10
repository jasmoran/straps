include "src/language/nodes/Node.v10"
include "src/language/Tokenizer.v10"

func Parser Parser_new(String stream_name, Stream input) {
	return Parser_new(stream_name, Tokenizer_new(stream_name, input), Set<String>_new(), None<Scope>)
}

func Node Parser_parse(String stream_name, Stream input) {
	return Parser_new(stream_name, input).parse()
}

class Parser(String name, Tokenizer t, Set<String> reqs, Option<Scope> parent_scope) {
	func Node nt_class() {
		this.t.consume(CLASS)

		var pos = this.t.get_pos()

		var vtable = None<Map<String_FunctionNode>>
		if (this.t.peek() == VIRTUAL) {
			this.t.consume(VIRTUAL)
			vtable = Some(Map<String_FunctionNode>_new(32))
		}

		var name = this.t.consume(IDENTIFIER)

		var parent = None<Type>
		if (this.t.peek() == LESS) {
			this.t.consume(LESS)
			parent = Some(Type_new(this.t.consume(IDENTIFIER)))
		}

		var fields = this.typed_list()
		var block = this.block(None<Scope>)

		return ClassNode_new(pos, name, fields, block, vtable, parent)
	}

	func Node nt_enum() {
		this.t.consume(ENUM)

		var pos = this.t.get_pos()

		var name = this.t.consume(IDENTIFIER)
		var values = this.block(None<Scope>)

		return EnumNode_new(pos, name, values)
	}

	func Node nt_function() {
		this.t.consume(FUNC)

		var pos = this.t.get_pos()

		var ret_type = this.t.consume(IDENTIFIER)
		var name = this.t.consume(IDENTIFIER)
		var args = this.typed_list()
		var block = this.block(Some(scope))

		return FunctionNode_new(pos, Type_new(ret_type), name, args, block)
	}

	func StringNode nt_identifier() {
		var ident = this.t.consume(IDENTIFIER)
		var pos = this.t.get_pos()
		return StringNode_new(nIDENTIFIER, pos, Type_new(), ident)
	}

	func Node nt_if() {
		this.t.consume(IF)

		var pos = this.t.get_pos()

		var expr = this.expression()
		var block_if = this.block(this.parent_scope)
		var node = IfNode_new(pos, expr, block_if)

		this.skip_newlines()
		if (this.t.peek() == ELSE) {
			this.t.consume(ELSE)
			node.block_else = Some(this.block(this.parent_scope))
		}

		return node
	}

	func Node nt_include() {
		this.t.consume(INCLUDE)
		var path = this.t.consume(STRING)
		var parser = Parser_new(path, File_open(path))
		parser.t.macros = this.t.macros
		parser.reqs = this.reqs
		return parser.parse()
	}

	func Node nt_nasm() {
		this.t.consume(NASM)
		var pos = this.t.get_pos()
		this.t.consume(PAREN_OPEN)
		var node = StringNode_new(nNASM, pos, Type_new("void"), this.t.consume(STRING))
		this.t.consume(PAREN_CLOSE)
		return node
	}

	func void nt_require() {
		this.t.consume(REQUIRE)
		var pos = this.t.get_pos()
		this.t.consume(PAREN_OPEN)
		this.reqs.add(norm_name(this.t.consume(STRING)))
		this.t.consume(PAREN_CLOSE)
	}






	func Node parse() {
		var pos = this.t.get_pos()
		var block = BlockNode_new(pos, scope)

		loop {
			var expr = this.statement()
			if (expr.type == nNONE) { break }
			block.append(expr)
		}

		return block
	}

	func BlockNode block(Option<Scope> parent_scope) {
		this.skip_newlines()

		var peek = this.t.peek()
		var pos = this.t.get_pos()

		var block = BlockNode_new(pos, Scope_new("BlockScope", parent_scope))
		var prev_scope = this.parent_scope
		this.parent_scope = Some(block.scope)

		if (peek == CURLY_OPEN) {
			this.t.consume(CURLY_OPEN)

			loop {
				if (this.t.peek() == CURLY_CLOSE) { break }
				if (this.t.peek() == EOF) { break }
				block.append(this.statement())
				this.skip_newlines()
			}

			this.t.consume(CURLY_CLOSE)
		} else {
			block.append(this.statement())
		}

		this.parent_scope = prev_scope

		return block
	}

	func LinkedList<StringNode> typed_list() {
		this.t.consume(PAREN_OPEN)
		var l = LinkedList<StringNode>_new()

		loop {
			if (this.t.peek() == PAREN_CLOSE) { break }

			var type = this.t.consume(IDENTIFIER)
			var pos = this.t.get_pos()
			var vrbl = this.t.consume(IDENTIFIER)
			var n = StringNode_new(nIDENTIFIER, pos, Type_new(type), vrbl)

			l.append(n)

			if (this.t.peek() != COMMA) { break }

			this.t.consume(COMMA)
		}

		this.t.consume(PAREN_CLOSE)

		return l
	}

	func LinkedList<RetNode> expression_list() {
		this.t.consume(PAREN_OPEN)
		var l = LinkedList<RetNode>_new()

		loop {
			if (this.t.peek() == PAREN_CLOSE) { break }
			l.append(this.expression())
			if (this.t.peek() != COMMA) { break }
			this.t.consume(COMMA)
		}

		this.t.consume(PAREN_CLOSE)

		return l
	}





	func void skip_newlines() {
		loop {
			if (this.t.peek() != NEW_LINE) break
			this.t.consume(NEW_LINE)
		}
	}

	func RetNode expression() {
		var node = this.logic_expr()
		loop {
			var tk = this.t.peek()
			if (tk != ASSIGN)
			if (tk != ADD)
			if (tk != SUB)
			if (tk != SHIFTL)
			if (tk != SHIFTR) break
			this.t.consume(tk)
			var pos = this.t.get_pos()
			node = BinaryOperationNode_new(pos, tk, node, this.logic_expr())
		}
		return node
	}

	func RetNode logic_expr() {
		var node = this.comp_expr()
		loop {
			var tk = this.t.peek()
			if (tk != AND)
			if (tk != OR) break
			this.t.consume(tk)
			var pos = this.t.get_pos()
			node = BinaryOperationNode_new(pos, tk, node, this.comp_expr())
		}
		return node
	}

	func RetNode comp_expr() {
		var node = this.add_expr()
		loop {
			var tk = this.t.peek()
			if (tk != EQUAL)
			if (tk != NOT_EQUAL)
			if (tk != GREATER)
			if (tk != GREATER_EQ)
			if (tk != LESS)
			if (tk != LESS_EQ) break
			this.t.consume(tk)
			var pos = this.t.get_pos()
			node = BinaryOperationNode_new(pos, tk, node, this.add_expr())
		}
		return node
	}

	func RetNode add_expr() {
		var node = this.mult_expr()

		loop {
			var tk = this.t.peek()
			if (tk != PLUS)
			if (tk != MINUS) break
			this.t.consume(tk)
			var pos = this.t.get_pos()
			node = BinaryOperationNode_new(pos, tk, node, this.mult_expr())
		}
		return node
	}

	func RetNode mult_expr() {
		var node = this.snd_expr()
		loop {
			var tk = this.t.peek()
			if (tk != ASTERISK)
			if (tk != FWD_SLASH) break
			this.t.consume(tk)
			var pos = this.t.get_pos()
			node = BinaryOperationNode_new(pos, tk, node, this.snd_expr())
		}
		return node
	}

	func RetNode snd_expr() {
		var tk = this.t.peek()
		if (tk != PLUS)
		if (tk != MINUS)
		if (tk != NOT)
		if (tk != ASTERISK) return this.top_expr()

		this.t.consume(tk)
		var pos = this.t.get_pos()
		return UnaryOperationNode_new(pos, tk, this.snd_expr(), true)
	}

	func RetNode top_expr() {
		var node = this.value()
		loop {
			var tk = this.t.peek()
			var pos = this.t.get_pos()
			if (tk == PAREN_OPEN) {
				var LinkedList<RetNode> arglist = this.expression_list()
				node = CallNode_new(pos, node, arglist)
			} else if (tk == SQUARE_OPEN) {
				this.t.consume(SQUARE_OPEN)
				node = BinaryOperationNode_new(pos, SQUARE_OPEN, node, this.expression())
				this.t.consume(SQUARE_CLOSE)
			} else if (tk == DOT) {
				this.t.consume(DOT)
				var rhs = StringNode_new(nIDENTIFIER, pos, Type_new(), "_MISSING").to(StringNode)
				if (this.t.peek() == IDENTIFIER) {
					rhs = this.nt_identifier()
				}
				node = BinaryOperationNode_new(pos, DOT, node, rhs)
			} else if (tk == INCREMENT) {
				this.t.consume(INCREMENT)
				node = UnaryOperationNode_new(pos, INCREMENT, node, false)
			} else if (tk == DECREMENT) {
				this.t.consume(DECREMENT)
				node = UnaryOperationNode_new(pos, DECREMENT, node, false)
			} else break
		}
		return node
	}

	func Node statement() {
		this.skip_newlines()

		var tk = this.t.peek()

		if (tk == EOF) return Node_new(nNONE, this.t.get_pos())

		if (tk == BREAK) {
			this.t.consume(BREAK)
			var pos = this.t.get_pos()
			return Node_new(nBREAK, pos)
		}

		if (tk == CLASS) {
			return this.nt_class()
		}

		if (tk == ENUM) {
			return this.nt_enum()
		}

		if (tk == FOR) {
			this.t.consume(FOR)
			var pos = this.t.get_pos()
			this.t.consume(PAREN_OPEN)
			var item = this.nt_identifier()
			this.t.consume(IN)
			var iter = this.expression()
			this.t.consume(PAREN_CLOSE)

			return ForNode_new(pos, item, iter, this.block(this.parent_scope))
		}

		if (tk == FUNC) {
			return this.nt_function()
		}

		if (tk == GLOBAL) {
			this.t.consume(GLOBAL)
			return ListNode_new(nGLOBAL, this.t.get_pos(), this.typed_list().to(LinkedList<Node>))
		}

		if (tk == IF) {
			return this.nt_if()
		}

		if (tk == INCLUDE) {
			return this.nt_include()
		}

		if (tk == LOOP) {
			this.t.consume(LOOP)
			var pos = this.t.get_pos()
			return LoopNode_new(pos, this.block(this.parent_scope))
		}

		if (tk == NASM) {
			return this.nt_nasm()
		}

		if (tk == NEXT) {
			this.t.consume(NEXT)
			var pos = this.t.get_pos()
			return Node_new(nNEXT, pos)
		}

		if (tk == RETURN) {
			this.t.consume(RETURN)
			var pos = this.t.get_pos()
			return ReturnNode_new(pos, this.expression())
		}

		if (tk == REQUIRE) {
			this.nt_require()
			return this.statement()
		}

		# TODO: add SWITCH/CASE

		if (tk == SYS) {
			this.t.consume(SYS)
			var retnode_to_node = this.expression_list().to(LinkedList<Node>)
			return ListNode_new(nSYS, this.t.get_pos(), retnode_to_node)
		}

		if (tk == VAR) {
			this.t.consume(VAR)
			var vr_pos = this.t.get_pos()
			var raw_type = this.t.consume(IDENTIFIER)
			var ident_pos = this.t.get_pos()

			# Inferring
			var vrbl = raw_type
			var type = Type_new(INFER)

			if (this.t.peek() == IDENTIFIER) {
				# Explicit
				vrbl = this.t.consume(IDENTIFIER)
				type = Type_new(raw_type)
			}

			this.t.consume(ASSIGN)
			var ass_pos = this.t.get_pos()

			return UnaryOperationNode_new(vr_pos, type, VAR,
				BinaryOperationNode_new(Type_new(), ass_pos, ASSIGN,
					StringNode_new(nIDENTIFIER, ident_pos, type, vrbl),
						this.expression()), true)
		}

		# TODO: add WHILE

		return this.expression()
	}

	func RetNode value() {
		this.skip_newlines()

		var tk = this.t.peek()

		# Bracketed expression
		if (tk == PAREN_OPEN) {
			this.t.consume(PAREN_OPEN)
			var node = this.expression()
			this.t.consume(PAREN_CLOSE)
			return node
		}

		if (tk == CHARACTER) {
			var chr = this.t.consume(CHARACTER)
			var pos = this.t.get_pos()
			return StringNode_new(nCHARACTER, pos, Type_new("Character"), chr)
		}

		if (tk == IDENTIFIER) {
			return this.nt_identifier()
		}

		if (tk == NUMBER) {
			var num = this.t.consume(NUMBER)
			var pos = this.t.get_pos()
			return StringNode_new(nNUMBER, pos, Type_new("Number"), num)
		}

		if (tk == STRING) {
			var str = this.t.consume(STRING)
			var pos = this.t.get_pos()
			return StringNode_new(nSTRING, pos, Type_new("String"), str)
		}

		error("Unknown expression ", tk.toString(), " at ", this.t.get_pos().toString())

		return RetNode_new(nNONE, Position_new(MetaCharacter_new('?', 0, 0), "Impossible"), Type_new())
	}
}
