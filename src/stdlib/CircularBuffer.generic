func CircularBuffer<?t> CircularBuffer<?t>_new(Number capacity)() {
	rax = capacity
	return CircularBuffer<?t>_new(Array<?t>_new(capacity), capacity, 0, 0, 0)
}

class CircularBuffer<?t> (Array<?t> buffer, Number capacity, Number head, Number tail, Number length) {
	func void add_check()() {
		if (this.length == this.capacity)
			error("Attempted to add to a full CircularBuffer<?t>")
	}

	func void remove_check()() {
		if (this.length == 0)
			error("Attempted to remove from an empty CircularBuffer<?t>")
	}

	func void peek_check(Number ix)() {
		if (ix < 0)
			error("Peek index too low for CircularBuffer<?t>")
		if (ix >= this.length)
			error("Peek index too large for CircularBuffer<?t>")
	}

	func void clear()() {
		this.head = 0
		this.tail = 0
		this.length = 0
	}

	func void push_front(?t item)() {
		this.add_check()
		if (this.head == 0) this.head = this.capacity
		this.head--
		this.buffer.set(this.head, item)
		this.length++
	}

	func void push_back(?t item)() {
		this.add_check()
		this.buffer.set(this.tail, item)
		this.tail++
		if (this.tail == this.capacity) this.tail = 0
		this.length++
	}

	func ?t pop_front() {
		this.remove_check()
		var item = this.buffer.get(this.head)
		this.head++
		if (this.head == this.capacity) this.head = 0
		this.length--
		return item
	}

	func ?t pop_back() {
		this.remove_check()
		if (this.tail == 0) this.tail = this.capacity
		this.tail--
		var item = this.buffer.get(this.tail)
		this.length--
		return item
	}

	func ?t peek(Number ix)() {
    # Calculate ix within buffer
    if (ix < 0) ix += this.length
		this.peek_check(ix)

    # Calculate actual ix in buffer
    ix += this.head
    if (ix >= this.capacity) ix -= this.capacity

    return this.buffer.get(ix)
	}

	func ?t peek()() {
    if (this.length == 0)
      error("Attempted peek into an empty CircularBuffer<?t>")
		return this.buffer.get(this.head)
	}
}
