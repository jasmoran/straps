func ArrIterator<?t> ArrIterator<?t>_new(Array<?t> arr) {
	return ArrIterator<?t>_new(arr, 0, false)
}

class ArrIterator<?t> (Array<?t> arr, Number curr, Boolean back) {
	func ?t fetch() {
		if (this.curr < 0) error("Fetched from finished Array<?t> iterator")
		if (this.curr >= this.arr.length) error("Fetched from finished Array<?t> iterator")
		var payload = this.arr.get(this.curr)
		if (this.back == true) {
			this.curr--
		} else {
			this.curr++
		}
		return payload
	}

	func Boolean finished() {
		if (this.curr < 0) return true
		if (this.curr >= this.arr.length) return true
		return false
	}

	func ArrIterator<?t> reverse() {
		if (this.back == true) {
			this.back = false
			this.curr = 0
		} else {
			this.back = true
			this.curr = this.arr.length
			this.curr--
		}
		return this
	}

	func void set(?t value) {
		var ix = this.curr
		if (this.back == true) {
			ix++
		} else {
			ix--
		}
		this.arr.set(ix, value)
	}

	func ArrIterator<?t> iter() return this
}

func Array<?t> Array<?t>_new(Number size) {
	var byte_size = size
	byte_size << 3
	return Array<?t>_new(0, size, allocate(byte_size))
}

class Array<?t> (Number length, Number size, void data) {
	func ?t get(Number ix) {
		var addr = ix.to(Any)
		addr << 3
		addr += this.data
		var res = addr.deref.to(?t)
		return res
	}

	func void set(Number ix, ?t item) {
		var addr = ix.to(Any)
		addr << 3
		addr += this.data
		addr.deref = item.to(Any)
	}

	func Array<?t> append(?t item) {
		# TODO: check size is large enough

		this.set(this.length, item)
		this.length++

		return this
	}

	func void clear() {
		this.length = 0
	}

	func Array<?t> shallow_clone() {
		var clone = Array<?t>_new(this.size)
		for (item in this) clone.append(item)
		return clone
	}

	func ArrIterator<?t> iter() {
		return ArrIterator<?t>_new(this)
	}
}
