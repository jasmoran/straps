func Array Array_new(Number size)(Number byte_size) {
	byte_size = size
	byte_size << 3
	return Array_new(0, size, allocate(byte_size))
}

class Array (Number length, Number size, void data) {
	func Any get(Number ix)(Any addr) {
		addr = ix
		addr << 3
		addr += this.data
		return addr.deref
	}

	func void set(Number ix, Any item)(Any addr) {
		addr = ix
		addr << 3
		addr += this.data
		addr.deref = item
	}

	func Array append(Any item)() {
		# TODO: check size is large enough

		this.set(this.length, item)
		this.length++

		return this
	}

	func Number find(Any val, Function compare)(Number index) {
		index = 0
		loop {
			# Detect end of array
			if (this.length == index) {
				nasm("mov rax, -1")
				return rax
			}

			# Detect match
			rax = this.get(index)
			nasm("push rax")
			rax = val
			nasm("push rax")
			rax = compare
			nasm("call rax")
			if (rax == true) {
				return index
			}

			index++
		}
	}

	func void clear()() {
		this.length = 0
	}

	func Array shallow_clone() {
		var clone = Array_new(this.size)
		var ix = 0
		loop {
			if (ix == this.length) { break }
			clone.append(this.get(ix))
			ix++
		}
	}
}
