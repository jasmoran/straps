class Stat (
  Number device_id, Number inode, Number hard_links, Number user_mode,
  Number gid, Number unknown, Number size, Number block_size,
  Number blocks, Number last_access, Number last_access_ns,
  Number last_mod, Number last_mod_ns, Number last_status, Number last_status_ns
) {
  func Number file_mode() {
    rax = this.user_mode
    nasm("and rax, 0xFFFF")
    return rax
  }

  func Number uid() {
    rax = this.user_mode
    rax >> 32
    nasm("and rax, 0xFFFF")
    return rax
  }
}

func Stream File_open(CharArr path)(Stream file) {
	sys(2, path, 0, 511)
	file = rax
	if (file < 0) {
		error("Could not open file: \"", String_fromTerminated(path), "\"")
	}
	return file
}

func Stream File_create(CharArr path)(Stream file) {
	sys(85, path, 511)
	file = rax
	if (file < 0) {
		error("Could not create file: \"", String_fromTerminated(path), "\"")
	}
	return file
}

func void File_close(Stream stream) {
	sys(3, stream)
}

func void File_delete(CharArr path)() {
	sys(87, path)
}

func Stream File_open(String path)() {
	return File_open(path.toTerminated())
}

func Stream File_create(String path)() {
	return File_create(path.toTerminated())
}

func void File_delete(String path)() {
	File_delete(path.toTerminated())
}

func Stat File_stat(String path) {
  var stat = Stat_new(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
  var null_path = path.toTerminated()
  sys(4, null_path, stat)
  return stat
}