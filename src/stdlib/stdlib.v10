include "src/stdlib/Boolean.v10"
include "src/stdlib/Memory.v10"
include "src/stdlib/Number.v10"
include "src/stdlib/Stream.v10"
include "src/stdlib/String.v10"
include "src/stdlib/File.v10"
include "src/stdlib/Array.v10"
include "src/stdlib/LinkedList.v10"
include "src/stdlib/Map.v10"
include "src/stdlib/CircularBuffer.v10"
include "src/stdlib/Run.v10"
include "src/stdlib/Range.v10"
include "src/stdlib/Set.v10"

class void () {}
enum void { Void }

define t "Any"
include "src/stdlib/Option.generic"
class Any (Any deref) {}
class Function () {}

func void exit(Number exit_code) {
	sys(60, exit_code)
}
func void exit() exit(0)

func void error(String s1, String s2, String s3, String s4, String s5) {
	"Error: ".print(STDERR)
	if(s1 > NullString) s1.print(STDERR)
	if(s2 > NullString) s2.print(STDERR)
	if(s3 > NullString) s3.print(STDERR)
	if(s4 > NullString) s4.print(STDERR)
	if(s5 > NullString) s5.println(STDERR)
	backtrace()
	exit(1)
}
func void error(String s1, String s2, String s3, String s4) error(NullString, s1, s2, s3, s4)
func void error(String s1, String s2, String s3) error(NullString, NullString, s1, s2, s3)
func void error(String s1, String s2) error(NullString, NullString, NullString, s1, s2)
func void error(String s1) error(NullString, NullString, NullString, NullString, s1)
func void error() error(NullString, NullString, NullString, NullString, NullString)

func void backtrace() {
	# Get list of function pointers
	nasm("mov rax, _FUNCTIONLIST")
	var flist = rax.to(Array<Any>)

	# Get list of function names
	nasm("mov rax, _FUNCTIONNAMELIST")
	var fnamelist = rax.to(Array<String>)

	var curr_rbp = rbp.to(Any)

	loop {
		# Get address of current function
		var addr = (curr_rbp + 8).deref

		if (addr < 1000.to(Any)) break

		var index = flist.length
		loop {
			index--
			# Detect end of array
			if (index < 0) {
				"Unknown Function".println(STDERR)
				return Void
			}

			# Detect match
			if (flist.get(index) < addr) {
				var fname = fnamelist.get(index)
				fname.println()
				break
			}
		}

		curr_rbp = curr_rbp.deref
	}
}

func Number and(Number a, Number b) {
	rax = a.to(void)
	rbx = b.to(void)
	nasm("and rax, rbx")
	return rax.to(Number)
}

func Number or(Number a, Number b) {
	rax = a.to(void)
	rbx = b.to(void)
	nasm("or rax, rbx")
	return rax.to(Number)
}