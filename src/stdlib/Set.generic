func Set<?t> Set<?t>_new() {
	var set = LinkedList<?t>_new().to(Set<?t>)
	return set
}

class Set<?t> < LinkedList<?t> () {
	func Option<LinkedListNode<?t>> get_node(?t value) {
		for (item in this) {
			if (item.equal(value) == true) return item_iter.curr
		}
		return None<LinkedListNode<?t>>
	}

	func Boolean contains(?t value) {
		if (this.get_node(value).is_none() == true) return false
		return true
	}

	func void add(?t value) {
		if (this.get_node(value).is_none() == true) this.append(value)
	}

	func void remove(?t value) {
		var lln = this.get_node(value)
		# Inherited method lookup doesn't properly support overloads
		if (lln.is_some() == true) this.remove_node(lln.unwrap())
	}
}