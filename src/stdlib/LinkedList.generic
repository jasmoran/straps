func LLIterator<?t> LLIterator<?t>_new(LinkedList<?t> list) {
 	var LinkedListNode<?t> curr = 1
	return LLIterator<?t>_new(list, curr, false)
}

class LLIterator<?t> (LinkedList<?t> list, LinkedListNode<?t> curr, Boolean back) {
	func ?t fetch() {
		if (this.back == true) {
			if (this.curr == 1) {
				this.curr = this.list.last
			} else {
				this.curr = this.curr.back
			}
		} else {
			if (this.curr == 1) {
				this.curr = this.list.first
			} else {
				this.curr = this.curr.fwrd
			}
		}
    if (this.curr == 0) return 0
		return this.curr.payload
	}

	func Boolean finished() {
    if (this.curr == 0 || this.list.length < 1) return true
		if (this.curr == 1) return false
		if (this.back == true) {
			if (this.curr.back == 0) return true
		} else {
			if (this.curr.fwrd == 0) return true
		}
		return false
	}

	func LLIterator<?t> reverse() {
		if (this.back == true) {
			this.back = false
		} else {
			this.back = true
		}
		return this
	}

	func void set(?t value) {
		if (this.curr == 0) return 0
		this.curr.payload = value
	}

	func LLIterator<?t> iter() return this
}

func LinkedList<?t> LinkedList<?t>_new()(LinkedListNode<?t> n) {
	n = 0
	return LinkedList<?t>_new(n, n, 0)
}

func LinkedListNode<?t> LinkedListNode<?t>_new(?t payload)(LinkedListNode<?t> n) {
	n = 0
	return LinkedListNode<?t>_new(n, n, payload)
}

class LinkedListNode<?t> (LinkedListNode<?t> fwrd, LinkedListNode<?t> back, ?t payload) {}

class LinkedList<?t> (LinkedListNode<?t> first, LinkedListNode<?t> last, Number length) {
	func ?t get(Number ix)() {
		return this.fetch(ix).payload
	}

	func void set(Number ix, ?t payload)() {
		this.fetch(ix).payload = payload
	}

	func LinkedList<?t> join(LinkedList<?t> other) {
		this.last.fwrd = other.first
		other.first.back = this.last
		this.last = other.last
	}

	func LinkedListNode<?t> append(?t payload)(LinkedListNode<?t> node) {
		node = LinkedListNode<?t>_new(payload)

		node.back = this.last
		if (this.last != 0) {
			this.last.fwrd = node
		}
		this.last = node

		# Set first if empty
		if (this.first == 0) {
			this.first = node
		}

		this.length++

		return node
	}

	func LinkedListNode<?t> prepend(?t payload)() {
		return this.insert_before(this.first, payload)
	}

	func LinkedListNode<?t> insert_before(LinkedListNode<?t> anchor, ?t payload)(LinkedListNode<?t> node) {
		node = LinkedListNode<?t>_new(payload)

		if (anchor != 0) {
			# Set up node
			node.fwrd = anchor
			node.back = anchor.back

			# Update anchor.back
			if (anchor.back != 0) {
				anchor.back.fwrd = node
			}

			# Update anchor
			anchor.back = node
		}

		# Update list
		if (this.first == anchor) {
			this.first = node
		}
		if (this.last == 0) {
			this.last = node
		}
		this.length++

		return node
	}

	func void remove(LinkedListNode<?t> node)() {
		if (node.fwrd == 0) {
			this.last = node.back
		} else {
			node.fwrd.back = node.back
		}

		if (node.back == 0) {
			this.first = node.fwrd
		} else {
			node.back.fwrd = node.fwrd
		}

		this.length--
	}

	func void remove(Number ix)(LinkedListNode<?t> node) {
		node = this.fetch(ix)
		this.remove(node)
	}

	func void remove_last()() {
		this.remove(this.last)
	}

	func LinkedListNode<?t> fetch(Number ix)(LinkedListNode<?t> node) {
		node = this.first
		loop {
			if (node == 0) {
				node = this.first
			}

			if (ix == 0) {
				return node
			}

			node = node.fwrd
			ix--
		}
	}

	func LinkedListNode<?t> fetch_by_data(?t data)(LinkedListNode<?t> node) {
		node = this.first
		loop {
			# Return -1 if node not found
			if (node == 0) {
				nasm("mov rax, -1")
				return rax
			}

			# Compare data
			if (node.payload == data) {
				return node
			}

			node = node.fwrd
		}
	}

	func void clear()() {
		this.first = 0
		this.last = 0
		this.length = 0
	}

	func void print(Stream stream, String sep)(LinkedListNode<?t> node, String str_cast) {
		# Prints all list elements
		# WARNING: Assumes that all elements are strings

		node = this.first
		if (node != 0) {
			loop {
				str_cast = node.payload
				str_cast.print(stream)

				node = node.fwrd

				if (node == 0) {
					break
				}

				sep.print(stream)
			}
		}
	}

	func LinkedList<?t> shallow_clone() {
		var clone = LinkedList<?t>_new()
		var lln = this.first
		loop {
		  if (lln == 0) break
		  clone.append(lln.payload)
		  lln = lln.fwrd
		}
		return clone
	}

	func LLIterator<?t> iter() {
		return LLIterator<?t>_new(this)
	}
}
