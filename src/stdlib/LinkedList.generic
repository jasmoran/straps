func LLIterator<?t> LLIterator<?t>_new(LinkedList<?t> list) {
	return LLIterator<?t>_new(list, None<LinkedListNode<?t>>, false)
}

class LLIterator<?t> (LinkedList<?t> list, Option<LinkedListNode<?t>> curr, Boolean back) {
	func ?t fetch() {
		if (this.finished() == true) error("Fetched from finished LinkedList<?t> iterator")

		if (this.back == true) {
			if (this.curr.is_some() == true) {
				this.curr = this.curr.unwrap().back
			} else {
				this.curr = this.list.last
			}
		} else {
			if (this.curr.is_some() == true) {
				this.curr = this.curr.unwrap().fwrd
			} else {
				this.curr = this.list.first
			}
		}
		return this.curr.expect("Fetched from finished LinkedList<?t> iterator").payload
	}

	func Boolean finished() {
		if (this.list.length < 1) return true
		if (this.list.first.is_none() == true) error("Non-empty LinkedList<?t> has no first element")
		if (this.list.last.is_none() == true) error("Non-empty LinkedList<?t> has no last element")
		if (this.curr.is_none() == true) return false
		if (this.back == true) {
			return this.curr.unwrap().back.is_none()
		} else {
			return this.curr.unwrap().fwrd.is_none()
		}
		return false
	}

	func LLIterator<?t> reverse() {
		if (this.back == true) {
			this.back = false
		} else {
			this.back = true
		}
		return this
	}

	func void set(?t value) {
		if (this.curr.is_some() == true) this.curr.unwrap().payload = value
	}

	func LLIterator<?t> iter() return this
}

func LinkedList<?t> LinkedList<?t>_new() {
	return LinkedList<?t>_new(None<LinkedListNode<?t>>, None<LinkedListNode<?t>>, 0)
}

func LinkedListNode<?t> LinkedListNode<?t>_new(?t payload) {
	return LinkedListNode<?t>_new(None<LinkedListNode<?t>>, None<LinkedListNode<?t>>, payload)
}

class LinkedListNode<?t> (Option<LinkedListNode<?t>> fwrd, Option<LinkedListNode<?t>> back, ?t payload) {}

class LinkedList<?t> (Option<LinkedListNode<?t>> first, Option<LinkedListNode<?t>> last, Number length) {
	func Option<?t> get(Number ix) {
		var fetch = this.fetch(ix)
		if (fetch.is_none() == true) return None<?t>
		return Some(fetch.unwrap().payload)
	}

	func void set(Number ix, ?t payload) {
		this.fetch(ix).expect("Index out of range").payload = payload
	}

	func LinkedList<?t> append(?t payload) {
		var node = Some(LinkedListNode<?t>_new(None<LinkedListNode<?t>>, this.last, payload))

		if (this.last.is_some() == true) {
			this.last.unwrap().fwrd = node
		}
		this.last = node

		# Set first if empty
		if (this.first.is_none() == true) {
			this.first = node
		}

		this.length++

		return this
	}

	func LinkedList<?t> prepend(?t payload) {
		this.insert_before(this.first, payload)
		return this
	}

	func LinkedList<?t> insert_before(Option<LinkedListNode<?t>> anchor, ?t payload) {
		var node = LinkedListNode<?t>_new(payload)
		var optnode = Some(node)

		if (anchor.is_some() == true) {
			var anc = anchor.unwrap()

			# Set up node
			node.fwrd = anchor
			node.back = anc.back

			# Update anchor.back
			if (anc.back.is_some() == true) {
				anc.back.unwrap().fwrd = optnode
			}

			# Update anchor
			anc.back = optnode
		}

		# Update list
		if (this.first == anchor) {
			this.first = optnode
		}
		if (this.last.is_none() == true) {
			this.last = optnode
		}
		this.length++

		return this
	}

	func void remove(LinkedListNode<?t> node) {
		if (node.fwrd.is_some() == true) {
			node.fwrd.unwrap().back = node.back
		} else {
			this.last = node.back
		}

		if (node.back.is_some() == true) {
			node.back.unwrap().fwrd = node.fwrd
		} else {
			this.first = node.fwrd
		}

		this.length--
	}

	func void remove_node(LinkedListNode<?t> node) this.remove(node)

	func void remove(Number ix) {
		var node = this.fetch(ix)
		if (node.is_some() == true) this.remove(node.unwrap())
	}

	func void remove_last() {
		if (this.last.is_some() == true) this.remove(this.last.unwrap())
	}

	func Option<LinkedListNode<?t>> fetch(Number ix) {
		if (ix >= this.length) return None<LinkedListNode<?t>>
		for (node in this) {
			if (ix == 0) return node_iter.curr
			ix--
		}
		return None<LinkedListNode<?t>>
	}

	func void clear() {
		this.first = None<LinkedListNode<?t>>
		this.last = None<LinkedListNode<?t>>
		this.length = 0
	}

	func LinkedList<?t> shallow_clone() {
		var clone = LinkedList<?t>_new()
		for (item in this) {
		  clone.append(item)
		}
		return clone
	}

	func LLIterator<?t> iter() {
		return LLIterator<?t>_new(this)
	}
}

define t "LinkedListNode<?t>"
include "src/stdlib/Option.generic"