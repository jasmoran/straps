define t "CharArr"
include "src/stdlib/Option.generic"

class CharArr(void data) {}

func StrIterator StrIterator_new(String str) {
	return StrIterator_new(str, Range_new(str.length))
}

class StrIterator (String str, Range range) {
	func Character fetch() {
		return this.str.get(this.range.fetch())
	}

	func Boolean finished() {
		return this.range.finished()
	}

	func StrIterator reverse() {
		this.range.reverse()
		return this
	}

	func void set(Character value) {
		var ix = this.range.curr
		if (this.range.back == true) {
			ix++
		} else {
			ix--
		}
		this.str.set(ix, value)
	}

	func StrIterator iter() return this
}

enum String {
	NullString
}

func String String_new(Number size) {
	var data = allocate(size).to(CharArr)
	return String_new(0, size, data)
}

func String String_fromTerminated(CharArr source)(String addr, Number length) {
	# Get string length
	rdi = source
	rax = 0
	rcx = 1000000
	nasm("repne scasb
	")
	length = 999999
	length -= rcx

	addr = String_new(length)

	# Copy main data
	rsi = source
	rdi = addr.data
	rcx = length
	nasm("rep movsb
	")

	# Set length of new string
	addr.length = length

	return addr
}

func Boolean String_equal(String a, String b)() {
	return a.equal(b)
}

class Character (void data) {
	func String toString()(String s) {
		s = String_new(1)
		s.append(this)
		return s
	}
}

define t "String"
include "src/stdlib/Option.generic"

class String (Number length, Number size, CharArr data) {
	func Character get(Number ix)() {
		rax = this.data
		rax += ix
		rbx = 0
		nasm("mov bl, BYTE[rax]
		")

		return rbx.to(Character)
	}

	func void set(Number ix, Character character)() {
		rax = this.data
		rax += ix
		rbx = character
		nasm("mov BYTE[rax], bl
		")
	}

	func String append(Character character)() {
		# TODO: check size is large enough

		this.set(this.length, character)
		this.length++

		return this
	}

	func String prepend(Character character)() {
		this.shift_right(1)
		this.set(0, character)
		return this
	}

	func String shift_right(Number n)() {
		# Shifts characters in the string n bytes to the right
		rcx = this.length
		rsi = this.data
		rsi += rcx
		rsi--
		rdi = rsi
		rdi += n
		nasm("std")
		nasm("rep movsb")
		nasm("cld")
		this.length += n
		return this
	}

	func String shift_left(Number n)() {
		# Shifts characters in the string n bytes to the left
		rsi = this.data
		rdi = rsi
		rsi += n
		rcx = this.length
		nasm("rep movsb")
		this.length -= n
		return this
	}

	func void print()() {
		this.print(STDOUT)
	}

	func void print(Stream out)() {
		if (this == NullString) { return Void }
		sys(1, out, this.data, this.length)
	}

	func void println()() {
		this.println(STDOUT)
	}

	func void println(Stream out)(String new_line) {
		this.print(out)
		new_line = "\n"
		new_line.print(out)
	}

	func void copyTo(String dest)() {
		# Copy main data
		rsi = this.data
		rdi = dest.data
		rcx = this.length
		nasm("rep movsb
		")

		# Set length of destination
		dest.length = this.length
	}

	func String clone()() {
		return this.clone(0)
	}

	func String clone(Number extra)(Number len, String str) {
		len = this.length
		len += extra
		str = String_new(len)
		this.copyTo(str)
		return str
	}

	func void clear()() {
		this.length = 0
	}

	func String append(String string)() {
		# Copy main data
		rsi = string.data
		rdi = this.data
		rdi += this.length
		rcx = string.length
		nasm("rep movsb
		")

		# Set length of destination
		this.length += string.length

		return this
	}

	func Number hash()() {
		# Load string
		r12 = this.length
		rcx = this.data

		# Load hash constants
		rax = 14695981039346656037
		rbx = 1099511628211
		loop {
			if (r12 == 0) {
				break
			}
			nasm("xor al, BYTE[rcx]
			mul rbx")
			rcx++
			r12--
		}

		return rax.to(Number)
	}

	func Boolean equal(String other)() {
		# Compare addresses
		if (this == other) {
			return true
		}

		# Compare lengths
		rbx = this.length
		rcx = other.length
		if (rbx != rcx) {
			return false
		}

		rsi = this.data
		rdi = other.data

		# Compare byte by byte
		nasm("repe cmpsb
		jne .str_not_eq
		")
		return true
		nasm(".str_not_eq:
		")
		return false
	}

	func Number unescaped_length()(Number ix, Number escaped) {
		escaped = 0
		ix = 0
		loop {
			if (ix >= this.length) { break }

			# Backslash
			if (this.get(ix) == '\\') {
				# Skip next character
				ix++
				escaped++
			}

			ix++
		}

		rax = this.length
		rax -= escaped
		return rax.to(Number)
	}

	func CharArr toTerminated() {
		var len = this.length + 1
		var c = allocate(len).to(CharArr)
		rsi = this.data
		rdi = c
		rcx = this.length
		nasm("rep movsb")
		rax = c
		rax += this.length
		nasm("mov BYTE[rax], 0")
		return c
	}

	func StrIterator iter() {
		return StrIterator_new(this)
	}

	func Boolean contains(Character c) {
		for (char in this) {
			if (char == c) return true
		}
		return false
	}
}
