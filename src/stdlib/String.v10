define t "CharArr"
include "src/stdlib/Option.generic"

class CharArr(void data) {}

func StrIterator StrIterator_new(String str) {
	return StrIterator_new(str, Range_new(str.length))
}

class StrIterator (String str, Range range) {
	func Character fetch() {
		return this.str.get(this.range.fetch())
	}

	func Boolean finished() {
		return this.range.finished()
	}

	func StrIterator reverse() {
		this.range.reverse()
		return this
	}

	func void set(Character value) {
		var ix = this.range.curr
		if (this.range.back == true) {
			ix++
		} else {
			ix--
		}
		this.str.set(ix, value)
	}

	func StrIterator iter() return this
}

enum String {
	NullString
}

func String String_new(Number size) {
	var data = allocate(size).to(CharArr)
	return String_new(0, size, data)
}

func String String_fromTerminated(CharArr source) {
	# Get string length
	rdi = source.to(void)
	rax = 0.to(void)
	rcx = 1000000.to(void)
	nasm(";/*
	repne scasb;*/")
	var length = 999999
	length -= rcx

	var addr = String_new(length)
	var ca = addr.data.to(void)

	# Copy main data
	memcpy(source, addr.data, length)

	# Set length of new string
	addr.length = length

	return addr
}

func Boolean String_equal(String a, String b) {
	return a.equal(b)
}

class Character (void data) {
	func String toString() {
		var s = String_new(1)
		s.append(this)
		return s
	}
}

define t "String"
include "src/stdlib/Option.generic"

class String (Number length, Number size, CharArr data) {
	func Character get(Number ix) {
		var ca = this.data.to(void)
		rax = ca
		rax += ix
		rbx = 0.to(void)
		nasm(";/*
		mov bl, BYTE[rax];*/
		")

		return rbx.to(Character)
	}

	func void set(Number ix, Character character) {
		var ca = this.data.to(void)
		rax = ca
		rax += ix
		rbx = character.to(void)
		nasm(";/*
		mov BYTE[rax], bl;*/
		")
	}

	func String append(Character character) {
		# TODO: check size is large enough

		this.set(this.length, character)
		this.length++

		return this
	}

	func String prepend(Character character) {
		this.shift_right(1)
		this.set(0, character)
		return this
	}

	# Shifts characters in the string n bytes to the right
	func String shift_right(Number n) {
		var end_of_string = this.data + this.length - 1
		nasm(";/*
		std;*/")
		memcpy(end_of_string, end_of_string + n, this.length)
		nasm(";/*
		cld;*/")
		this.length += n
		return this
	}

	# Shifts characters in the string n bytes to the left
	func String shift_left(Number n) {
		this.length -= n
		memcpy(this.data + n, this.data, this.length)

		return this
	}

	func void print() {
		this.print(STDOUT)
	}

	func void print(Stream out) {
		if (this == NullString) { return Void }
		sys(1, out, this.data, this.length)
	}

	func void println() {
		this.println(STDOUT)
	}

	func void println(Stream out) {
		this.print(out)
		var new_line = "\n"
		new_line.print(out)
	}

	func void copyTo(String dest) {
		# Copy main data
		memcpy(this.data, dest.data, this.length)

		# Set length of destination
		dest.length = this.length
	}

	func String clone() {
		return this.clone(0)
	}

	func String clone(Number extra) {
		var len = this.length
		len += extra
		var str = String_new(len)
		this.copyTo(str)
		return str
	}

	func void clear() {
		this.length = 0
	}

	func String append(String string) {
		# Copy main data
		memcpy(string.data, this.data + this.length, string.length)

		# Set length of destination
		this.length += string.length

		return this
	}

	func Number hash() {
		# Load hash constant
		# Value must be loaded directly a register as is larger than 32 bits
		# "The only instruction which takes a full 64-bit immediate is: MOV reg64,imm64"
		rax = 14695981039346656037.to(void)
		var hash = rax.to(Number)

		for (char in this) {
			rax = hash.to(void)
			rcx = char.to(void)
			nasm(";/*
			xor al, cl;*/")
			hash = rax.to(Number) * 1099511628211
		}

		return hash
	}

	func Boolean equal(String other) {
		# Compare addresses
		if (this == other) {
			return true
		}

		# Compare lengths
		if (this.length != other.length) {
			return false
		}

		return memcmp(this.data, other.data, this.length)
	}

	func Number unescaped_length() {
		var escaped = 0
		var ix = 0
		loop {
			if (ix >= this.length) { break }

			# Backslash
			if (this.get(ix) == '\\') {
				# Skip next character
				ix++
				escaped++
			}

			ix++
		}

		return this.length - escaped
	}

	func CharArr toTerminated() {
		var chararr = allocate(this.length + 1).to(CharArr)
		memcpy(this.data, chararr, this.length)

		rax = chararr.to(void)
		rax += this.length
		nasm(";/*
		mov BYTE[rax], 0;*/")

		return chararr
	}

	func StrIterator iter() {
		return StrIterator_new(this)
	}

	func Boolean contains(Character c) {
		for (char in this) {
			if (char == c) return true
		}
		return false
	}

	func String replace(Character old, Character new) {
		var clone = this.clone()
		for (char in clone) {
			if (char == old) char_iter.set(new)
		}
		return clone
	}
}
