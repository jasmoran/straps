func lit_string(node)(strings) {
	var strings = node_new(nSTRINGS, 0, var node)
	node_children(var strings)
	lit_string_recurse(var node, rax)
	node_children(var node)
	ll_append(rax, var strings)
	return
}

func lit_string_recurse(strings, node)(orig_data, new_string) {
	node_type(var node)
	if (rax == nSTRING) {
		var new_string = node_new(nSTRING, 0, 0)
		var new_string[8] = var node[8]
		ll_append(var strings, var new_string)

		var node[0] = nIDENTIFIER
		var new_string = string_new(10)
		string_copy("string_", var new_string)
		ll_length(var strings)
		rax--
		string_from_number(rax, var new_string, 0)
		var node[8] = var new_string
		return
	}

	node_children(var node)
	lit_string_children(rax, var strings)

	return
}

func lit_string_children(strings, children)(ix) {
	if (var children != 0) {
		var ix = 0
		loop {
			if (var ix == ll_length(var children)) { break }
			ll_get(var children, var ix)
			lit_string_recurse(rax, var strings)
			var ix++
		}
	}

	return
}
