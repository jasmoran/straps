func string_new(size)(addr) {
	# Allocate memory
	rax = var size
	rax += 16
	var addr = allocate(rax)

	# Set length and size
	rax[0] = 0
	rax[8] = var size

	return var addr
}

func string_length(str)() {
	return var str[0]
}

func string_size(str)() {
	return var str[8]
}

func string_data(str)() {
	return var str[16]
}

func string_append(character, string)() {
	# TODO: check size is large enough

	rax = var string
	rbx = rax[0]
	rax[0]++
	rax += 16
	rax += rbx
	rbx = var character
	nasm("mov BYTE[rax], bl
	")

	return
}

func string_prepend(character, string)() {
	# Copy main data
	rsi = var string
	rsi += 16
	rdi = rsi
	rdi++
	rcx = var string[0]
	nasm("rep movsb
	")

	rax = var string
	rax += 16
	rbx = var character
	nasm("mov BYTE[rax], bl
	")

	var string[0]++

	return
}

func string_print(str, out_stream)() {
	if (var out_stream == FILE) {
		rax = out_file_fid[0]
		var out_stream = rax
	}

	r12 = var str
	r13 = r12[0]
	r12 += 16

	sys(1, var out_stream, r12, r13)
	return
}

func string_copy(dest, source)() {
	# Copy main data
	rsi = var source
	rsi += 16
	rdi = var dest
	rdi += 16
	rcx = var source[0]
	nasm("rep movsb
	")

	# Set length of destination
	rax = var source[0]
	var dest[0] = rax

	return
}

func string_clone(source)(addr) {
	string_length(var source)
	var addr = string_new(rax)
	string_copy(var source, var addr)
	return var addr
}

func string_clear(str)() {	var str[0] = 0
	return
}

func string_inspect(string, out_stream)() {
	printer_number(var out_stream, var string)
	string_print(var out_stream, " - ")
	string_length(var string)
	printer_number(var out_stream, rax)
	string_print(var out_stream, " - ")
	string_size(var string)
	printer_number(var out_stream, rax)
	string_print(var out_stream, " - ")
	string_print(var out_stream, var string)
	string_print(var out_stream, new_line)

	return var string
}

func string_join(dest, source)() {
	# Copy main data
	rsi = var source
	rsi += 16
	rdi = var dest
	rdi += 16
	rdi += var dest[0]
	rcx = var source[0]
	nasm("rep movsb
	")

	# Set length of destination
	var dest[0] += var source[0]

	return

}

func string_from_number(plus, str_out, int_in)(digit_count) {
	rcx = 10
	var digit_count = 0

	if (var int_in < 0) {
		string_append(var str_out, '-')
		rax = 0
		rax -= var int_in
	} else {
		if (var plus == 1) {
			string_append(var str_out, '+')
		}
		rax = var int_in
	}

	loop {
		rdx = 0
		nasm("
			div rcx
			push rdx
		")
		var digit_count++

		if (rax == 0) {
			break
		}
	}

	loop {
		nasm("pop rax")
		rax += '0'

		string_append(var str_out, rax)

		var digit_count--

		# Exit loop if count has reached 0
		if (var digit_count == 0) {
			break
		}
	}

	return
}

func string_hash(str)() {
	# Load string
	rcx = var str
	r12 = rcx[0]
	rcx += 16

	# Load hash constants
	rax = 14695981039346656037
	rbx = 1099511628211
	loop {
		if (r12 == 0) {
			break
		}
		nasm("xor al, BYTE[rcx]
		mul rbx
		")
		rcx++
		r12--
	}

	return
}

func string_equal(str2, str1)() {
	# Compare addresses
	rsi = var str2
	rdi = var str1
	if (rsi == rdi) {
		return 1
	}

	# Compare lengths
	rbx = rsi[0]
	rcx = rdi[0]
	if (rbx != rcx) {
		return 0
	}

	rsi += 16
	rdi += 16

	# Compare byte by byte
	nasm("repe cmpsb
	jne .str_not_eq
	")
	return 1
	nasm(".str_not_eq:
	")
	return 0
}

func string_clone_nullterm(source)(addr, length) {
	# Get string length
	rdi = var source
	rax = 0
	rcx = 1000000
	nasm("repne scasb
	")
	var length = 999999
	var length -= rcx

	var addr = string_new(var length)

	# Copy main data
	rsi = var source
	rdi = var addr
	rdi += 16
	rcx = var length
	nasm("rep movsb
	")

	# Set length of new string
	var addr[0] = var length

	return var addr
}
