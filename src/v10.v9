nasm("
section .bss
	current_char:	resb	1
	char_next:	resb	1
	ret_size:			resq	1
	block_cnt:		resq  1
	enclosing_loo:resq  1

	token_tye:		resq	1

	token:
	token_length:	resq	1
	token_size:		resq	1
	token_image:	resb	2048

	fun:
	fun_length:	resq 1
	fun_size:		resq 1
	fun_data:		resb 256

	ident:
	ident_length:	resq 1
	ident_size:		resq 1
	ident_data:		resb 256

	ident2:
	resq 2
	resb 256

	num_str:
	resq 2
	resb 256

	indexing:
	resq 2
	resb 256

	in_file_fid:	resq 1
	out_file_fid:	resq 1
	line_number:	resq 1
	column_number:resq 1
	file_name:		resq 1
	fun_names:		resq 1
	strings:			resq 1
	registers:		resq 1
	enm_names:		resq 1
	enm_items:		resq 1
	local_vars:		resq 1
	global_vars:	resq 1
	jump_types:		resq 1
	operations:		resq 1

section .data
	new_line:
	dq 1, 1
	db 10

	quote:
	dq 1, 1
	db 39

section .text
global main
")

include "src/printer.v9"
include "src/tokenizer.v9"
include "src/array.v9"
include "src/memory.v9"
include "src/node.v9"
include "src/token_class.v9"
include "src/parser.v9"
include "src/string.v9"
include "src/map.v9"
include "src/dump_visitor.v9"

func read_number()() {
	rax = 0
	rbx = token_image
	rcx = 10
	r11 = 0
	r12 = token_length[0]

	loop {
		nasm("mov r11b, BYTE[rbx]")
		rbx++
		r11b -= '0'
		nasm("mul rcx")
		al += r11b
		r12--
		if (r12 == 0) {break}
	}
	return
}

func main()(in_file_name, node) {
	nasm("mov QWORD[rbp + 8], 0
	")

	# Open in file
	rsi += 8
	var in_file_name = rsi
	rsi = rsi[0]
	sys(2,rsi,0,511)
	in_file_fid[0] = rax

	# Create out file
	rsi = var in_file_name
	rsi += 8
	rsi = rsi[0]
	sys(85,rsi,511)
	out_file_fid[0] = rax

	# Create array for function names
	fun_names[0] = array_new(1024)

	# Create array for string literals
	strings[0] = array_new(1024)

	# Create arrays for enums
	enm_names[0] = array_new(10)
	enm_items[0] = array_new(10)

	# Create map for local variables
	local_vars[0] = map_new(100)
	global_vars[0] = map_new(1024)

	# Initialize 64 bit register globals
	map_set(global_vars[0], "rax", "rax")
	map_set(global_vars[0], "rbx", "rbx")
	map_set(global_vars[0], "rcx", "rcx")
	map_set(global_vars[0], "rdx", "rdx")
	map_set(global_vars[0], "rbp", "rbp")
	map_set(global_vars[0], "rsi", "rsi")
	map_set(global_vars[0], "rdi", "rdi")
	map_set(global_vars[0], "r11", "r11")
	map_set(global_vars[0], "r12", "r12")
	map_set(global_vars[0], "r13", "r13")
	map_set(global_vars[0], "r14", "r14")

	# Initialize 8 bit register globals
	map_set(global_vars[0], "al", "al")
	map_set(global_vars[0], "r11b", "r11b")
	map_set(global_vars[0], "r12b", "r12b")

	# Initialize registers array
	registers[0] = array_new(6)
	array_append(registers[0], "rax,")
	array_append(registers[0], "rdi,")
	array_append(registers[0], "rsi,")
	array_append(registers[0], "rdx,")
	array_append(registers[0], "r10,")
	array_append(registers[0], "r8,")

	# Initialize jump types array
	jump_types[0] = array_new(6)
	array_append(jump_types[0], "jne")
	array_append(jump_types[0], "je")
	array_append(jump_types[0], "jng")
	array_append(jump_types[0], "jl")
	array_append(jump_types[0], "jnl")
	array_append(jump_types[0], "jg")

	# Initialize operations array
	operations[0] = array_new(7)
	array_append(operations[0], "inc ")
	array_append(operations[0], "dec ")
	array_append(operations[0], "add ")
	array_append(operations[0], "sub ")
	array_append(operations[0], "shl ")
	array_append(operations[0], "shr ")
	array_append(operations[0], "mov ")

	# Store file name
	file_name[0] = string_clone_nullterm(var in_file_name[0])

	# Initialize tokenizer
	nasm("mov BYTE[char_next], 1
	")
	token_kee_char()
	token_length[0] = 0
	line_number[0] = 1
	column_number[0] = 1

	var node = nt_statements(0)
	node_print(STDOUT, var node, 0)
	dump(STDOUT, var node)

	# Write data section
	string_print(FILE, new_line)
	string_print(FILE, "section .data")
	string_print(FILE, new_line)
	#list_func(FILE)
	#list_str(FILE)
	#list_enums(FILE)

	nasm("
	mov rsp, rbp
	pop rbp
	")
	sys(60,0)
}
