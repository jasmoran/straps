func literal(node)(string_class, number_class, character_class) {
	var string_class = map_get(types[0], "String")
	if (var string_class <= 0) {
		string_print(STDERR, "Error: Could not resolve type String")
		string_print(STDERR, new_line)
		sys(60,1)
	}

	var number_class = map_get(types[0], "Number")
	if (var number_class <= 0) {
		string_print(STDERR, "Error: Could not resolve type Number")
		string_print(STDERR, new_line)
		sys(60,1)
	}

	var character_class = map_get(types[0], "Character")
	if (var character_class <= 0) {
		string_print(STDERR, "Error: Could not resolve type Character")
		string_print(STDERR, new_line)
		sys(60,1)
	}

	literal_recurse(var node, var string_class, var number_class, var character_class)

	return
}

func literal_recurse(character_class, number_class, string_class, node)() {
	node_type(var node)

	if (rax == nSTRING) {
		var node[40] = var string_class
		return
	}

	if (rax == nNUMBER) {
		var node[40] = var number_class
		return
	}

	if (rax == nCHARACTER) {
		var node[40] = var character_class
		return
	}

	node_children(var node)
	literal_children(rax, var string_class, var number_class, var character_class)

	return
}

func literal_children(character_class, number_class, string_class, children)(ix) {
	if (var children != 0) {
		var ix = 0
		loop {
			if (var ix == ll_length(var children)) { break }
			ll_get(var children, var ix)
			literal_recurse(rax, var string_class, var number_class, var character_class)
			var ix++
		}
	}

	return
}
