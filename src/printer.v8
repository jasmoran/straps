nasm("
%define FILE			-1
%define STDOUT		1
%define STDERR		2
")

func printer_line(1, 0) {
	call string_print(arg1, " on line ")
	call printer_number(arg1, line_number[0])
	call string_print(arg1, " column ")
	call printer_number(arg1, column_number[0])
	return
}

func printer_stack(1, 2) {
	var1 = rbp
	loop {
		rax = var1
		rax += 8
		rax = rax[0]
		var2 = rax

		if (var2 == 0) {
			break
		}

		call printer_number(arg1, var2)
		call string_print(arg1, ":")
		call string_print(arg1, new_line)

		r13 = fun_list
		loop {
			# Load function address
			r14 = r13[0]
			if (var2 > r14) {
				r13 += 8
				r13 = r13[0]
				call string_print(arg1, r13)
				break
			} else {
				r13 += 16
			}
		}

		call string_print(arg1, new_line)

		# Load next rbp
		rax = var1
		rax = rax[0]
		var1 = rax
	}
	return
}

func printer_number(2, 1) {
	# rax/arg1 - integer input
	# rcx - divisor
	# rdx - remainder
	# var1 - digit counter

	call string_clear(num_str)

	rax = arg1
	rcx = 10
	var1 = 0

	loop {
		rdx = 0
		nasm("
			div rcx
			push rdx
		")
		var1++

		if (rax == 0) {
			break
		}
	}

	loop {
		nasm("pop rax")
		rax += '0'

		call string_append(num_str, rax)

		var1--

		# Exit loop if count has reached 0
		if (var1 == 0) {
			break
		}
	}

	call string_print(arg2, num_str)

	return
}
