func resolving(node)(children, scope, res, name, child) {
	var children = node_children(var node)
	node_type(var node)

	if (rax == nIDENTIFIER) {
		var scope = get_scope(var node)
		var name = node_data(var node)
		var res = map_get(var scope, rax)

		if (rax < 0) {
			var res = map_get(global_vars[0], var name)
		}

		if (var res < 0) {
			string_print(STDERR, "Error: Could not resolve variable ")
			string_print(STDERR, var name)
			string_print(STDERR, new_line)

			sys(60,1)

		} else {
			if (var res != 0) {
				node_type(var res)
				var node[0] = rax
				node_data(var res)
				var node[8] = rax
				node_children(var res)
				var node[24] = rax
				node_class(var res)
				var node[40] = rax
			}
		}

		return
	}

	if (rax == nFIELD) {
		ll_get(var children, 0)
		resolving(rax)

		ll_get(var children, 0)
		node_class(rax)

		if (rax == 0) {
			string_print(STDERR, "Error: No type information for:")
			string_print(STDERR, new_line)
			ll_get(var children, 0)
			node_print(STDERR, rax, 0)

			sys(60,1)
		}

		var scope = node_scope(rax)

		ll_get(var children, 1)
		var name = node_data(rax)
		var res = map_get(var scope, rax)

		if (var res < 0) {
			string_print(STDERR, "Error: Could not resolve field ")
			string_print(STDERR, var name)
			string_print(STDERR, new_line)

			sys(60,1)

		} else {
			# Add object to method arguments
			node_parent(var node)
			node_type(rax)
			if (rax == nCALL) {
				var child = ll_get(var children, 0)
				node_parent(var node)
				node_children(rax)
				ll_get(rax, 1)
				node_children(rax)
				ll_prepend(rax, var child)
			}

			node_type(var res)
			if (rax == nNUMBER) {
				var node[0] = nINDEX
				ll_set(var children, 1, var res)
			} else {
				# Resolve method name
				var node[0] = nIDENTIFIER
				node_data(var res)
				var node[8] = rax
				node_children(var node)
				ll_empty(rax)
			}
			node_class(var res)
			var node[40] = rax
		}

		return
	}

	if (rax == nCALL) {
		resolving_children(var children)

		ll_get(var children, 0)
		node_class(rax)
		var node[40] = rax
		return
	}

	if (rax == nGLOBAL) {
		return
	}

	resolving_children(var children)

	return
}

func get_scope(node)() {
	loop {
		if (var node == 0) {
			return global_vars[0]
		}

		node_type(var node)
		if (rax == nFUNCTION) {
			return var node[32]
		}

		node_parent(var node)
		var node = rax
	}
}

func resolving_children(children)(ix) {
	if (var children != 0) {
		var ix = 0
		loop {
			if (var ix == ll_length(var children)) { break }
			ll_get(var children, var ix)
			resolving(rax)
			var ix++
		}
	}

	return
}
